// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/08/2023 12:39:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    yusuf_gassaloglu_2020510034_HW2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module yusuf_gassaloglu_2020510034_HW2_vlg_sample_tst(
	clk,
	r_en_ram,
	r_en_rom,
	ram_address,
	ram_data,
	rom_address,
	w_en,
	sampler_tx
);
input  clk;
input  r_en_ram;
input  r_en_rom;
input [3:0] ram_address;
input [3:0] ram_data;
input [3:0] rom_address;
input  w_en;
output sampler_tx;

reg sample;
time current_time;
always @(clk or r_en_ram or r_en_rom or ram_address or ram_data or rom_address or w_en)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module yusuf_gassaloglu_2020510034_HW2_vlg_check_tst (
	ram_out,
	rom_out,
	sampler_rx
);
input [3:0] ram_out;
input [10:0] rom_out;
input sampler_rx;

reg [3:0] ram_out_expected;
reg [10:0] rom_out_expected;

reg [3:0] ram_out_prev;
reg [10:0] rom_out_prev;

reg [3:0] ram_out_expected_prev;
reg [10:0] rom_out_expected_prev;

reg [3:0] last_ram_out_exp;
reg [10:0] last_rom_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ram_out_prev = ram_out;
	rom_out_prev = rom_out;
end

// update expected /o prevs

always @(trigger)
begin
	ram_out_expected_prev = ram_out_expected;
	rom_out_expected_prev = rom_out_expected;
end


// expected ram_out[ 3 ]
initial
begin
	ram_out_expected[3] = 1'bX;
end 
// expected ram_out[ 2 ]
initial
begin
	ram_out_expected[2] = 1'bX;
end 
// expected ram_out[ 1 ]
initial
begin
	ram_out_expected[1] = 1'bX;
end 
// expected ram_out[ 0 ]
initial
begin
	ram_out_expected[0] = 1'bX;
end 
// expected rom_out[ 10 ]
initial
begin
	rom_out_expected[10] = 1'bX;
end 
// expected rom_out[ 9 ]
initial
begin
	rom_out_expected[9] = 1'bX;
end 
// expected rom_out[ 8 ]
initial
begin
	rom_out_expected[8] = 1'bX;
end 
// expected rom_out[ 7 ]
initial
begin
	rom_out_expected[7] = 1'bX;
end 
// expected rom_out[ 6 ]
initial
begin
	rom_out_expected[6] = 1'bX;
end 
// expected rom_out[ 5 ]
initial
begin
	rom_out_expected[5] = 1'bX;
end 
// expected rom_out[ 4 ]
initial
begin
	rom_out_expected[4] = 1'bX;
end 
// expected rom_out[ 3 ]
initial
begin
	rom_out_expected[3] = 1'bX;
end 
// expected rom_out[ 2 ]
initial
begin
	rom_out_expected[2] = 1'bX;
end 
// expected rom_out[ 1 ]
initial
begin
	rom_out_expected[1] = 1'bX;
end 
// expected rom_out[ 0 ]
initial
begin
	rom_out_expected[0] = 1'bX;
end 
// generate trigger
always @(ram_out_expected or ram_out or rom_out_expected or rom_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ram_out = %b | expected rom_out = %b | ",ram_out_expected_prev,rom_out_expected_prev);
	$display("| real ram_out = %b | real rom_out = %b | ",ram_out_prev,rom_out_prev);
`endif
	if (
		( ram_out_expected_prev[0] !== 1'bx ) && ( ram_out_prev[0] !== ram_out_expected_prev[0] )
		&& ((ram_out_expected_prev[0] !== last_ram_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ram_out_exp[0] = ram_out_expected_prev[0];
	end
	if (
		( ram_out_expected_prev[1] !== 1'bx ) && ( ram_out_prev[1] !== ram_out_expected_prev[1] )
		&& ((ram_out_expected_prev[1] !== last_ram_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ram_out_exp[1] = ram_out_expected_prev[1];
	end
	if (
		( ram_out_expected_prev[2] !== 1'bx ) && ( ram_out_prev[2] !== ram_out_expected_prev[2] )
		&& ((ram_out_expected_prev[2] !== last_ram_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ram_out_exp[2] = ram_out_expected_prev[2];
	end
	if (
		( ram_out_expected_prev[3] !== 1'bx ) && ( ram_out_prev[3] !== ram_out_expected_prev[3] )
		&& ((ram_out_expected_prev[3] !== last_ram_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ram_out_exp[3] = ram_out_expected_prev[3];
	end
	if (
		( rom_out_expected_prev[0] !== 1'bx ) && ( rom_out_prev[0] !== rom_out_expected_prev[0] )
		&& ((rom_out_expected_prev[0] !== last_rom_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[0] = rom_out_expected_prev[0];
	end
	if (
		( rom_out_expected_prev[1] !== 1'bx ) && ( rom_out_prev[1] !== rom_out_expected_prev[1] )
		&& ((rom_out_expected_prev[1] !== last_rom_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[1] = rom_out_expected_prev[1];
	end
	if (
		( rom_out_expected_prev[2] !== 1'bx ) && ( rom_out_prev[2] !== rom_out_expected_prev[2] )
		&& ((rom_out_expected_prev[2] !== last_rom_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[2] = rom_out_expected_prev[2];
	end
	if (
		( rom_out_expected_prev[3] !== 1'bx ) && ( rom_out_prev[3] !== rom_out_expected_prev[3] )
		&& ((rom_out_expected_prev[3] !== last_rom_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[3] = rom_out_expected_prev[3];
	end
	if (
		( rom_out_expected_prev[4] !== 1'bx ) && ( rom_out_prev[4] !== rom_out_expected_prev[4] )
		&& ((rom_out_expected_prev[4] !== last_rom_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[4] = rom_out_expected_prev[4];
	end
	if (
		( rom_out_expected_prev[5] !== 1'bx ) && ( rom_out_prev[5] !== rom_out_expected_prev[5] )
		&& ((rom_out_expected_prev[5] !== last_rom_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[5] = rom_out_expected_prev[5];
	end
	if (
		( rom_out_expected_prev[6] !== 1'bx ) && ( rom_out_prev[6] !== rom_out_expected_prev[6] )
		&& ((rom_out_expected_prev[6] !== last_rom_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[6] = rom_out_expected_prev[6];
	end
	if (
		( rom_out_expected_prev[7] !== 1'bx ) && ( rom_out_prev[7] !== rom_out_expected_prev[7] )
		&& ((rom_out_expected_prev[7] !== last_rom_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[7] = rom_out_expected_prev[7];
	end
	if (
		( rom_out_expected_prev[8] !== 1'bx ) && ( rom_out_prev[8] !== rom_out_expected_prev[8] )
		&& ((rom_out_expected_prev[8] !== last_rom_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[8] = rom_out_expected_prev[8];
	end
	if (
		( rom_out_expected_prev[9] !== 1'bx ) && ( rom_out_prev[9] !== rom_out_expected_prev[9] )
		&& ((rom_out_expected_prev[9] !== last_rom_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[9] = rom_out_expected_prev[9];
	end
	if (
		( rom_out_expected_prev[10] !== 1'bx ) && ( rom_out_prev[10] !== rom_out_expected_prev[10] )
		&& ((rom_out_expected_prev[10] !== last_rom_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_out_expected_prev);
		$display ("     Real value = %b", rom_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rom_out_exp[10] = rom_out_expected_prev[10];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module yusuf_gassaloglu_2020510034_HW2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg r_en_ram;
reg r_en_rom;
reg [3:0] ram_address;
reg [3:0] ram_data;
reg [3:0] rom_address;
reg w_en;
// wires                                               
wire [3:0] ram_out;
wire [10:0] rom_out;

wire sampler;                             

// assign statements (if any)                          
yusuf_gassaloglu_2020510034_HW2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.r_en_ram(r_en_ram),
	.r_en_rom(r_en_rom),
	.ram_address(ram_address),
	.ram_data(ram_data),
	.ram_out(ram_out),
	.rom_address(rom_address),
	.rom_out(rom_out),
	.w_en(w_en)
);
// ram_address[ 3 ]
initial
begin
	ram_address[3] = 1'b1;
	ram_address[3] = #110000 1'b0;
	ram_address[3] = #130000 1'b1;
	ram_address[3] = #110000 1'b0;
end 
// ram_address[ 2 ]
initial
begin
	ram_address[2] = 1'b1;
	ram_address[2] = #110000 1'b0;
	ram_address[2] = #130000 1'b1;
	ram_address[2] = #110000 1'b0;
end 
// ram_address[ 1 ]
initial
begin
	ram_address[1] = 1'b0;
end 
// ram_address[ 0 ]
initial
begin
	ram_address[0] = 1'b0;
	ram_address[0] = #240000 1'b1;
	ram_address[0] = #110000 1'b0;
end 
// ram_data[ 3 ]
initial
begin
	ram_data[3] = 1'b0;
end 
// ram_data[ 2 ]
initial
begin
	ram_data[2] = 1'b1;
	ram_data[2] = #110000 1'b0;
end 
// ram_data[ 1 ]
initial
begin
	ram_data[1] = 1'b1;
	ram_data[1] = #110000 1'b0;
end 
// ram_data[ 0 ]
initial
begin
	ram_data[0] = 1'b0;
end 

// r_en_ram
initial
begin
	r_en_ram = 1'b0;
	r_en_ram = #240000 1'b1;
	r_en_ram = #110000 1'b0;
end 

// w_en
initial
begin
	w_en = 1'b1;
	w_en = #110000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #12500 1'b1;
	#12500;
end 

// r_en_rom
initial
begin
	r_en_rom = 1'b0;
	r_en_rom = #490000 1'b1;
	r_en_rom = #120000 1'b0;
end 
// rom_address[ 3 ]
initial
begin
	rom_address[3] = 1'b0;
	rom_address[3] = #490000 1'b1;
	rom_address[3] = #120000 1'b0;
end 
// rom_address[ 2 ]
initial
begin
	rom_address[2] = 1'b0;
end 
// rom_address[ 1 ]
initial
begin
	rom_address[1] = 1'b0;
	rom_address[1] = #490000 1'b1;
	rom_address[1] = #120000 1'b0;
end 
// rom_address[ 0 ]
initial
begin
	rom_address[0] = 1'b0;
end 

yusuf_gassaloglu_2020510034_HW2_vlg_sample_tst tb_sample (
	.clk(clk),
	.r_en_ram(r_en_ram),
	.r_en_rom(r_en_rom),
	.ram_address(ram_address),
	.ram_data(ram_data),
	.rom_address(rom_address),
	.w_en(w_en),
	.sampler_tx(sampler)
);

yusuf_gassaloglu_2020510034_HW2_vlg_check_tst tb_out(
	.ram_out(ram_out),
	.rom_out(rom_out),
	.sampler_rx(sampler)
);
endmodule

