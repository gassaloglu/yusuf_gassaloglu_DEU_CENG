// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2023 23:21:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    2021510008_Alperen_Aydin_Group19_Lab8_Project_CONTROL_UNIT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 2021510008_Alperen_Aydin_Group19_Lab8_Project_CONTROL_UNIT_vlg_sample_tst(
	INP_DATA,
	INP_LOAD,
	MASTER_CLOCK,
	MEMORY_CLOCK,
	sampler_tx
);
input [3:0] INP_DATA;
input  INP_LOAD;
input  MASTER_CLOCK;
input  MEMORY_CLOCK;
output sampler_tx;

reg sample;
time current_time;
always @(INP_DATA or INP_LOAD or MASTER_CLOCK or MEMORY_CLOCK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 2021510008_Alperen_Aydin_Group19_Lab8_Project_CONTROL_UNIT_vlg_check_tst (
	O_AR,
	O_AR_LOAD,
	O_D,
	O_DATA_MEM_WREN,
	O_E,
	O_F,
	O_INP,
	O_IR,
	O_IR_LOAD,
	O_OUT,
	O_OUT_LOAD,
	O_PC,
	O_PC_COUNT,
	O_PC_LOAD,
	O_Q,
	O_R0,
	O_R0_LOAD,
	O_R1,
	O_R1_LOAD,
	O_R2,
	O_R2_LOAD,
	O_Rd,
	O_S,
	O_S1,
	O_S2,
	O_SC_CLEAR,
	O_SP_COUNT,
	O_STACK_MEM_WREN,
	O_T,
	sampler_rx
);
input [3:0] O_AR;
input  O_AR_LOAD;
input [3:0] O_D;
input  O_DATA_MEM_WREN;
input  O_E;
input  O_F;
input [3:0] O_INP;
input [10:0] O_IR;
input  O_IR_LOAD;
input [3:0] O_OUT;
input  O_OUT_LOAD;
input [4:0] O_PC;
input  O_PC_COUNT;
input  O_PC_LOAD;
input  O_Q;
input [3:0] O_R0;
input  O_R0_LOAD;
input [3:0] O_R1;
input  O_R1_LOAD;
input [3:0] O_R2;
input  O_R2_LOAD;
input [1:0] O_Rd;
input  O_S;
input [1:0] O_S1;
input [1:0] O_S2;
input  O_SC_CLEAR;
input  O_SP_COUNT;
input  O_STACK_MEM_WREN;
input [2:0] O_T;
input sampler_rx;

reg [3:0] O_AR_expected;
reg  O_AR_LOAD_expected;
reg [3:0] O_D_expected;
reg  O_DATA_MEM_WREN_expected;
reg  O_E_expected;
reg  O_F_expected;
reg [3:0] O_INP_expected;
reg [10:0] O_IR_expected;
reg  O_IR_LOAD_expected;
reg [3:0] O_OUT_expected;
reg  O_OUT_LOAD_expected;
reg [4:0] O_PC_expected;
reg  O_PC_COUNT_expected;
reg  O_PC_LOAD_expected;
reg  O_Q_expected;
reg [3:0] O_R0_expected;
reg  O_R0_LOAD_expected;
reg [3:0] O_R1_expected;
reg  O_R1_LOAD_expected;
reg [3:0] O_R2_expected;
reg  O_R2_LOAD_expected;
reg [1:0] O_Rd_expected;
reg  O_S_expected;
reg [1:0] O_S1_expected;
reg [1:0] O_S2_expected;
reg  O_SC_CLEAR_expected;
reg  O_SP_COUNT_expected;
reg  O_STACK_MEM_WREN_expected;
reg [2:0] O_T_expected;

reg [3:0] O_AR_prev;
reg  O_AR_LOAD_prev;
reg [3:0] O_D_prev;
reg  O_DATA_MEM_WREN_prev;
reg  O_E_prev;
reg  O_F_prev;
reg [3:0] O_INP_prev;
reg [10:0] O_IR_prev;
reg  O_IR_LOAD_prev;
reg [3:0] O_OUT_prev;
reg  O_OUT_LOAD_prev;
reg [4:0] O_PC_prev;
reg  O_PC_COUNT_prev;
reg  O_PC_LOAD_prev;
reg  O_Q_prev;
reg [3:0] O_R0_prev;
reg  O_R0_LOAD_prev;
reg [3:0] O_R1_prev;
reg  O_R1_LOAD_prev;
reg [3:0] O_R2_prev;
reg  O_R2_LOAD_prev;
reg [1:0] O_Rd_prev;
reg  O_S_prev;
reg [1:0] O_S1_prev;
reg [1:0] O_S2_prev;
reg  O_SC_CLEAR_prev;
reg  O_SP_COUNT_prev;
reg  O_STACK_MEM_WREN_prev;
reg [2:0] O_T_prev;

reg [3:0] O_AR_expected_prev;
reg  O_AR_LOAD_expected_prev;
reg [3:0] O_D_expected_prev;
reg  O_DATA_MEM_WREN_expected_prev;
reg  O_E_expected_prev;
reg  O_F_expected_prev;
reg [3:0] O_INP_expected_prev;
reg [10:0] O_IR_expected_prev;
reg  O_IR_LOAD_expected_prev;
reg [3:0] O_OUT_expected_prev;
reg  O_OUT_LOAD_expected_prev;
reg [4:0] O_PC_expected_prev;
reg  O_PC_COUNT_expected_prev;
reg  O_PC_LOAD_expected_prev;
reg  O_Q_expected_prev;
reg [3:0] O_R0_expected_prev;
reg  O_R0_LOAD_expected_prev;
reg [3:0] O_R1_expected_prev;
reg  O_R1_LOAD_expected_prev;
reg [3:0] O_R2_expected_prev;
reg  O_R2_LOAD_expected_prev;
reg [1:0] O_Rd_expected_prev;
reg  O_S_expected_prev;
reg [1:0] O_S1_expected_prev;
reg [1:0] O_S2_expected_prev;
reg  O_SC_CLEAR_expected_prev;
reg  O_SP_COUNT_expected_prev;
reg  O_STACK_MEM_WREN_expected_prev;
reg [2:0] O_T_expected_prev;

reg [3:0] last_O_AR_exp;
reg  last_O_AR_LOAD_exp;
reg [3:0] last_O_D_exp;
reg  last_O_DATA_MEM_WREN_exp;
reg  last_O_E_exp;
reg  last_O_F_exp;
reg [3:0] last_O_INP_exp;
reg [10:0] last_O_IR_exp;
reg  last_O_IR_LOAD_exp;
reg [3:0] last_O_OUT_exp;
reg  last_O_OUT_LOAD_exp;
reg [4:0] last_O_PC_exp;
reg  last_O_PC_COUNT_exp;
reg  last_O_PC_LOAD_exp;
reg  last_O_Q_exp;
reg [3:0] last_O_R0_exp;
reg  last_O_R0_LOAD_exp;
reg [3:0] last_O_R1_exp;
reg  last_O_R1_LOAD_exp;
reg [3:0] last_O_R2_exp;
reg  last_O_R2_LOAD_exp;
reg [1:0] last_O_Rd_exp;
reg  last_O_S_exp;
reg [1:0] last_O_S1_exp;
reg [1:0] last_O_S2_exp;
reg  last_O_SC_CLEAR_exp;
reg  last_O_SP_COUNT_exp;
reg  last_O_STACK_MEM_WREN_exp;
reg [2:0] last_O_T_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:29] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 29'b1;
end

// update real /o prevs

always @(trigger)
begin
	O_AR_prev = O_AR;
	O_AR_LOAD_prev = O_AR_LOAD;
	O_D_prev = O_D;
	O_DATA_MEM_WREN_prev = O_DATA_MEM_WREN;
	O_E_prev = O_E;
	O_F_prev = O_F;
	O_INP_prev = O_INP;
	O_IR_prev = O_IR;
	O_IR_LOAD_prev = O_IR_LOAD;
	O_OUT_prev = O_OUT;
	O_OUT_LOAD_prev = O_OUT_LOAD;
	O_PC_prev = O_PC;
	O_PC_COUNT_prev = O_PC_COUNT;
	O_PC_LOAD_prev = O_PC_LOAD;
	O_Q_prev = O_Q;
	O_R0_prev = O_R0;
	O_R0_LOAD_prev = O_R0_LOAD;
	O_R1_prev = O_R1;
	O_R1_LOAD_prev = O_R1_LOAD;
	O_R2_prev = O_R2;
	O_R2_LOAD_prev = O_R2_LOAD;
	O_Rd_prev = O_Rd;
	O_S_prev = O_S;
	O_S1_prev = O_S1;
	O_S2_prev = O_S2;
	O_SC_CLEAR_prev = O_SC_CLEAR;
	O_SP_COUNT_prev = O_SP_COUNT;
	O_STACK_MEM_WREN_prev = O_STACK_MEM_WREN;
	O_T_prev = O_T;
end

// update expected /o prevs

always @(trigger)
begin
	O_AR_expected_prev = O_AR_expected;
	O_AR_LOAD_expected_prev = O_AR_LOAD_expected;
	O_D_expected_prev = O_D_expected;
	O_DATA_MEM_WREN_expected_prev = O_DATA_MEM_WREN_expected;
	O_E_expected_prev = O_E_expected;
	O_F_expected_prev = O_F_expected;
	O_INP_expected_prev = O_INP_expected;
	O_IR_expected_prev = O_IR_expected;
	O_IR_LOAD_expected_prev = O_IR_LOAD_expected;
	O_OUT_expected_prev = O_OUT_expected;
	O_OUT_LOAD_expected_prev = O_OUT_LOAD_expected;
	O_PC_expected_prev = O_PC_expected;
	O_PC_COUNT_expected_prev = O_PC_COUNT_expected;
	O_PC_LOAD_expected_prev = O_PC_LOAD_expected;
	O_Q_expected_prev = O_Q_expected;
	O_R0_expected_prev = O_R0_expected;
	O_R0_LOAD_expected_prev = O_R0_LOAD_expected;
	O_R1_expected_prev = O_R1_expected;
	O_R1_LOAD_expected_prev = O_R1_LOAD_expected;
	O_R2_expected_prev = O_R2_expected;
	O_R2_LOAD_expected_prev = O_R2_LOAD_expected;
	O_Rd_expected_prev = O_Rd_expected;
	O_S_expected_prev = O_S_expected;
	O_S1_expected_prev = O_S1_expected;
	O_S2_expected_prev = O_S2_expected;
	O_SC_CLEAR_expected_prev = O_SC_CLEAR_expected;
	O_SP_COUNT_expected_prev = O_SP_COUNT_expected;
	O_STACK_MEM_WREN_expected_prev = O_STACK_MEM_WREN_expected;
	O_T_expected_prev = O_T_expected;
end



// expected O_SC_CLEAR
initial
begin
	O_SC_CLEAR_expected = 1'bX;
end 
// expected O_AR[ 3 ]
initial
begin
	O_AR_expected[3] = 1'bX;
end 
// expected O_AR[ 2 ]
initial
begin
	O_AR_expected[2] = 1'bX;
end 
// expected O_AR[ 1 ]
initial
begin
	O_AR_expected[1] = 1'bX;
end 
// expected O_AR[ 0 ]
initial
begin
	O_AR_expected[0] = 1'bX;
end 
// expected O_IR[ 10 ]
initial
begin
	O_IR_expected[10] = 1'bX;
end 
// expected O_IR[ 9 ]
initial
begin
	O_IR_expected[9] = 1'bX;
end 
// expected O_IR[ 8 ]
initial
begin
	O_IR_expected[8] = 1'bX;
end 
// expected O_IR[ 7 ]
initial
begin
	O_IR_expected[7] = 1'bX;
end 
// expected O_IR[ 6 ]
initial
begin
	O_IR_expected[6] = 1'bX;
end 
// expected O_IR[ 5 ]
initial
begin
	O_IR_expected[5] = 1'bX;
end 
// expected O_IR[ 4 ]
initial
begin
	O_IR_expected[4] = 1'bX;
end 
// expected O_IR[ 3 ]
initial
begin
	O_IR_expected[3] = 1'bX;
end 
// expected O_IR[ 2 ]
initial
begin
	O_IR_expected[2] = 1'bX;
end 
// expected O_IR[ 1 ]
initial
begin
	O_IR_expected[1] = 1'bX;
end 
// expected O_IR[ 0 ]
initial
begin
	O_IR_expected[0] = 1'bX;
end 
// expected O_PC[ 4 ]
initial
begin
	O_PC_expected[4] = 1'bX;
end 
// expected O_PC[ 3 ]
initial
begin
	O_PC_expected[3] = 1'bX;
end 
// expected O_PC[ 2 ]
initial
begin
	O_PC_expected[2] = 1'bX;
end 
// expected O_PC[ 1 ]
initial
begin
	O_PC_expected[1] = 1'bX;
end 
// expected O_PC[ 0 ]
initial
begin
	O_PC_expected[0] = 1'bX;
end 
// expected O_T[ 2 ]
initial
begin
	O_T_expected[2] = 1'bX;
end 
// expected O_T[ 1 ]
initial
begin
	O_T_expected[1] = 1'bX;
end 
// expected O_T[ 0 ]
initial
begin
	O_T_expected[0] = 1'bX;
end 

// expected O_PC_COUNT
initial
begin
	O_PC_COUNT_expected = 1'bX;
end 

// expected O_IR_LOAD
initial
begin
	O_IR_LOAD_expected = 1'bX;
end 

// expected O_R0_LOAD
initial
begin
	O_R0_LOAD_expected = 1'bX;
end 

// expected O_R1_LOAD
initial
begin
	O_R1_LOAD_expected = 1'bX;
end 

// expected O_R2_LOAD
initial
begin
	O_R2_LOAD_expected = 1'bX;
end 

// expected O_OUT_LOAD
initial
begin
	O_OUT_LOAD_expected = 1'bX;
end 

// expected O_AR_LOAD
initial
begin
	O_AR_LOAD_expected = 1'bX;
end 

// expected O_PC_LOAD
initial
begin
	O_PC_LOAD_expected = 1'bX;
end 

// expected O_SP_COUNT
initial
begin
	O_SP_COUNT_expected = 1'bX;
end 

// expected O_DATA_MEM_WREN
initial
begin
	O_DATA_MEM_WREN_expected = 1'bX;
end 

// expected O_STACK_MEM_WREN
initial
begin
	O_STACK_MEM_WREN_expected = 1'bX;
end 

// expected O_E
initial
begin
	O_E_expected = 1'bX;
end 

// expected O_F
initial
begin
	O_F_expected = 1'bX;
end 

// expected O_Q
initial
begin
	O_Q_expected = 1'bX;
end 

// expected O_S
initial
begin
	O_S_expected = 1'bX;
end 
// expected O_R0[ 3 ]
initial
begin
	O_R0_expected[3] = 1'bX;
end 
// expected O_R0[ 2 ]
initial
begin
	O_R0_expected[2] = 1'bX;
end 
// expected O_R0[ 1 ]
initial
begin
	O_R0_expected[1] = 1'bX;
end 
// expected O_R0[ 0 ]
initial
begin
	O_R0_expected[0] = 1'bX;
end 
// expected O_R1[ 3 ]
initial
begin
	O_R1_expected[3] = 1'bX;
end 
// expected O_R1[ 2 ]
initial
begin
	O_R1_expected[2] = 1'bX;
end 
// expected O_R1[ 1 ]
initial
begin
	O_R1_expected[1] = 1'bX;
end 
// expected O_R1[ 0 ]
initial
begin
	O_R1_expected[0] = 1'bX;
end 
// expected O_R2[ 3 ]
initial
begin
	O_R2_expected[3] = 1'bX;
end 
// expected O_R2[ 2 ]
initial
begin
	O_R2_expected[2] = 1'bX;
end 
// expected O_R2[ 1 ]
initial
begin
	O_R2_expected[1] = 1'bX;
end 
// expected O_R2[ 0 ]
initial
begin
	O_R2_expected[0] = 1'bX;
end 
// expected O_INP[ 3 ]
initial
begin
	O_INP_expected[3] = 1'bX;
end 
// expected O_INP[ 2 ]
initial
begin
	O_INP_expected[2] = 1'bX;
end 
// expected O_INP[ 1 ]
initial
begin
	O_INP_expected[1] = 1'bX;
end 
// expected O_INP[ 0 ]
initial
begin
	O_INP_expected[0] = 1'bX;
end 
// expected O_OUT[ 3 ]
initial
begin
	O_OUT_expected[3] = 1'bX;
end 
// expected O_OUT[ 2 ]
initial
begin
	O_OUT_expected[2] = 1'bX;
end 
// expected O_OUT[ 1 ]
initial
begin
	O_OUT_expected[1] = 1'bX;
end 
// expected O_OUT[ 0 ]
initial
begin
	O_OUT_expected[0] = 1'bX;
end 
// expected O_Rd[ 1 ]
initial
begin
	O_Rd_expected[1] = 1'bX;
end 
// expected O_Rd[ 0 ]
initial
begin
	O_Rd_expected[0] = 1'bX;
end 
// expected O_S1[ 1 ]
initial
begin
	O_S1_expected[1] = 1'bX;
end 
// expected O_S1[ 0 ]
initial
begin
	O_S1_expected[0] = 1'bX;
end 
// expected O_S2[ 1 ]
initial
begin
	O_S2_expected[1] = 1'bX;
end 
// expected O_S2[ 0 ]
initial
begin
	O_S2_expected[0] = 1'bX;
end 
// expected O_D[ 3 ]
initial
begin
	O_D_expected[3] = 1'bX;
end 
// expected O_D[ 2 ]
initial
begin
	O_D_expected[2] = 1'bX;
end 
// expected O_D[ 1 ]
initial
begin
	O_D_expected[1] = 1'bX;
end 
// expected O_D[ 0 ]
initial
begin
	O_D_expected[0] = 1'bX;
end 
// generate trigger
always @(O_AR_expected or O_AR or O_AR_LOAD_expected or O_AR_LOAD or O_D_expected or O_D or O_DATA_MEM_WREN_expected or O_DATA_MEM_WREN or O_E_expected or O_E or O_F_expected or O_F or O_INP_expected or O_INP or O_IR_expected or O_IR or O_IR_LOAD_expected or O_IR_LOAD or O_OUT_expected or O_OUT or O_OUT_LOAD_expected or O_OUT_LOAD or O_PC_expected or O_PC or O_PC_COUNT_expected or O_PC_COUNT or O_PC_LOAD_expected or O_PC_LOAD or O_Q_expected or O_Q or O_R0_expected or O_R0 or O_R0_LOAD_expected or O_R0_LOAD or O_R1_expected or O_R1 or O_R1_LOAD_expected or O_R1_LOAD or O_R2_expected or O_R2 or O_R2_LOAD_expected or O_R2_LOAD or O_Rd_expected or O_Rd or O_S_expected or O_S or O_S1_expected or O_S1 or O_S2_expected or O_S2 or O_SC_CLEAR_expected or O_SC_CLEAR or O_SP_COUNT_expected or O_SP_COUNT or O_STACK_MEM_WREN_expected or O_STACK_MEM_WREN or O_T_expected or O_T)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected O_AR = %b | expected O_AR_LOAD = %b | expected O_D = %b | expected O_DATA_MEM_WREN = %b | expected O_E = %b | expected O_F = %b | expected O_INP = %b | expected O_IR = %b | expected O_IR_LOAD = %b | expected O_OUT = %b | expected O_OUT_LOAD = %b | expected O_PC = %b | expected O_PC_COUNT = %b | expected O_PC_LOAD = %b | expected O_Q = %b | expected O_R0 = %b | expected O_R0_LOAD = %b | expected O_R1 = %b | expected O_R1_LOAD = %b | expected O_R2 = %b | expected O_R2_LOAD = %b | expected O_Rd = %b | expected O_S = %b | expected O_S1 = %b | expected O_S2 = %b | expected O_SC_CLEAR = %b | expected O_SP_COUNT = %b | expected O_STACK_MEM_WREN = %b | expected O_T = %b | ",O_AR_expected_prev,O_AR_LOAD_expected_prev,O_D_expected_prev,O_DATA_MEM_WREN_expected_prev,O_E_expected_prev,O_F_expected_prev,O_INP_expected_prev,O_IR_expected_prev,O_IR_LOAD_expected_prev,O_OUT_expected_prev,O_OUT_LOAD_expected_prev,O_PC_expected_prev,O_PC_COUNT_expected_prev,O_PC_LOAD_expected_prev,O_Q_expected_prev,O_R0_expected_prev,O_R0_LOAD_expected_prev,O_R1_expected_prev,O_R1_LOAD_expected_prev,O_R2_expected_prev,O_R2_LOAD_expected_prev,O_Rd_expected_prev,O_S_expected_prev,O_S1_expected_prev,O_S2_expected_prev,O_SC_CLEAR_expected_prev,O_SP_COUNT_expected_prev,O_STACK_MEM_WREN_expected_prev,O_T_expected_prev);
	$display("| real O_AR = %b | real O_AR_LOAD = %b | real O_D = %b | real O_DATA_MEM_WREN = %b | real O_E = %b | real O_F = %b | real O_INP = %b | real O_IR = %b | real O_IR_LOAD = %b | real O_OUT = %b | real O_OUT_LOAD = %b | real O_PC = %b | real O_PC_COUNT = %b | real O_PC_LOAD = %b | real O_Q = %b | real O_R0 = %b | real O_R0_LOAD = %b | real O_R1 = %b | real O_R1_LOAD = %b | real O_R2 = %b | real O_R2_LOAD = %b | real O_Rd = %b | real O_S = %b | real O_S1 = %b | real O_S2 = %b | real O_SC_CLEAR = %b | real O_SP_COUNT = %b | real O_STACK_MEM_WREN = %b | real O_T = %b | ",O_AR_prev,O_AR_LOAD_prev,O_D_prev,O_DATA_MEM_WREN_prev,O_E_prev,O_F_prev,O_INP_prev,O_IR_prev,O_IR_LOAD_prev,O_OUT_prev,O_OUT_LOAD_prev,O_PC_prev,O_PC_COUNT_prev,O_PC_LOAD_prev,O_Q_prev,O_R0_prev,O_R0_LOAD_prev,O_R1_prev,O_R1_LOAD_prev,O_R2_prev,O_R2_LOAD_prev,O_Rd_prev,O_S_prev,O_S1_prev,O_S2_prev,O_SC_CLEAR_prev,O_SP_COUNT_prev,O_STACK_MEM_WREN_prev,O_T_prev);
`endif
	if (
		( O_AR_expected_prev[0] !== 1'bx ) && ( O_AR_prev[0] !== O_AR_expected_prev[0] )
		&& ((O_AR_expected_prev[0] !== last_O_AR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_AR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_AR_expected_prev);
		$display ("     Real value = %b", O_AR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_AR_exp[0] = O_AR_expected_prev[0];
	end
	if (
		( O_AR_expected_prev[1] !== 1'bx ) && ( O_AR_prev[1] !== O_AR_expected_prev[1] )
		&& ((O_AR_expected_prev[1] !== last_O_AR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_AR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_AR_expected_prev);
		$display ("     Real value = %b", O_AR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_AR_exp[1] = O_AR_expected_prev[1];
	end
	if (
		( O_AR_expected_prev[2] !== 1'bx ) && ( O_AR_prev[2] !== O_AR_expected_prev[2] )
		&& ((O_AR_expected_prev[2] !== last_O_AR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_AR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_AR_expected_prev);
		$display ("     Real value = %b", O_AR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_AR_exp[2] = O_AR_expected_prev[2];
	end
	if (
		( O_AR_expected_prev[3] !== 1'bx ) && ( O_AR_prev[3] !== O_AR_expected_prev[3] )
		&& ((O_AR_expected_prev[3] !== last_O_AR_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_AR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_AR_expected_prev);
		$display ("     Real value = %b", O_AR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_AR_exp[3] = O_AR_expected_prev[3];
	end
	if (
		( O_AR_LOAD_expected_prev !== 1'bx ) && ( O_AR_LOAD_prev !== O_AR_LOAD_expected_prev )
		&& ((O_AR_LOAD_expected_prev !== last_O_AR_LOAD_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_AR_LOAD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_AR_LOAD_expected_prev);
		$display ("     Real value = %b", O_AR_LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O_AR_LOAD_exp = O_AR_LOAD_expected_prev;
	end
	if (
		( O_D_expected_prev[0] !== 1'bx ) && ( O_D_prev[0] !== O_D_expected_prev[0] )
		&& ((O_D_expected_prev[0] !== last_O_D_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_D_expected_prev);
		$display ("     Real value = %b", O_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_D_exp[0] = O_D_expected_prev[0];
	end
	if (
		( O_D_expected_prev[1] !== 1'bx ) && ( O_D_prev[1] !== O_D_expected_prev[1] )
		&& ((O_D_expected_prev[1] !== last_O_D_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_D_expected_prev);
		$display ("     Real value = %b", O_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_D_exp[1] = O_D_expected_prev[1];
	end
	if (
		( O_D_expected_prev[2] !== 1'bx ) && ( O_D_prev[2] !== O_D_expected_prev[2] )
		&& ((O_D_expected_prev[2] !== last_O_D_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_D[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_D_expected_prev);
		$display ("     Real value = %b", O_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_D_exp[2] = O_D_expected_prev[2];
	end
	if (
		( O_D_expected_prev[3] !== 1'bx ) && ( O_D_prev[3] !== O_D_expected_prev[3] )
		&& ((O_D_expected_prev[3] !== last_O_D_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_D[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_D_expected_prev);
		$display ("     Real value = %b", O_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_D_exp[3] = O_D_expected_prev[3];
	end
	if (
		( O_DATA_MEM_WREN_expected_prev !== 1'bx ) && ( O_DATA_MEM_WREN_prev !== O_DATA_MEM_WREN_expected_prev )
		&& ((O_DATA_MEM_WREN_expected_prev !== last_O_DATA_MEM_WREN_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_DATA_MEM_WREN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_DATA_MEM_WREN_expected_prev);
		$display ("     Real value = %b", O_DATA_MEM_WREN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O_DATA_MEM_WREN_exp = O_DATA_MEM_WREN_expected_prev;
	end
	if (
		( O_E_expected_prev !== 1'bx ) && ( O_E_prev !== O_E_expected_prev )
		&& ((O_E_expected_prev !== last_O_E_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_E_expected_prev);
		$display ("     Real value = %b", O_E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_E_exp = O_E_expected_prev;
	end
	if (
		( O_F_expected_prev !== 1'bx ) && ( O_F_prev !== O_F_expected_prev )
		&& ((O_F_expected_prev !== last_O_F_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_F_expected_prev);
		$display ("     Real value = %b", O_F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O_F_exp = O_F_expected_prev;
	end
	if (
		( O_INP_expected_prev[0] !== 1'bx ) && ( O_INP_prev[0] !== O_INP_expected_prev[0] )
		&& ((O_INP_expected_prev[0] !== last_O_INP_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_INP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_INP_expected_prev);
		$display ("     Real value = %b", O_INP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O_INP_exp[0] = O_INP_expected_prev[0];
	end
	if (
		( O_INP_expected_prev[1] !== 1'bx ) && ( O_INP_prev[1] !== O_INP_expected_prev[1] )
		&& ((O_INP_expected_prev[1] !== last_O_INP_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_INP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_INP_expected_prev);
		$display ("     Real value = %b", O_INP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O_INP_exp[1] = O_INP_expected_prev[1];
	end
	if (
		( O_INP_expected_prev[2] !== 1'bx ) && ( O_INP_prev[2] !== O_INP_expected_prev[2] )
		&& ((O_INP_expected_prev[2] !== last_O_INP_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_INP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_INP_expected_prev);
		$display ("     Real value = %b", O_INP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O_INP_exp[2] = O_INP_expected_prev[2];
	end
	if (
		( O_INP_expected_prev[3] !== 1'bx ) && ( O_INP_prev[3] !== O_INP_expected_prev[3] )
		&& ((O_INP_expected_prev[3] !== last_O_INP_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_INP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_INP_expected_prev);
		$display ("     Real value = %b", O_INP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O_INP_exp[3] = O_INP_expected_prev[3];
	end
	if (
		( O_IR_expected_prev[0] !== 1'bx ) && ( O_IR_prev[0] !== O_IR_expected_prev[0] )
		&& ((O_IR_expected_prev[0] !== last_O_IR_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[0] = O_IR_expected_prev[0];
	end
	if (
		( O_IR_expected_prev[1] !== 1'bx ) && ( O_IR_prev[1] !== O_IR_expected_prev[1] )
		&& ((O_IR_expected_prev[1] !== last_O_IR_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[1] = O_IR_expected_prev[1];
	end
	if (
		( O_IR_expected_prev[2] !== 1'bx ) && ( O_IR_prev[2] !== O_IR_expected_prev[2] )
		&& ((O_IR_expected_prev[2] !== last_O_IR_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[2] = O_IR_expected_prev[2];
	end
	if (
		( O_IR_expected_prev[3] !== 1'bx ) && ( O_IR_prev[3] !== O_IR_expected_prev[3] )
		&& ((O_IR_expected_prev[3] !== last_O_IR_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[3] = O_IR_expected_prev[3];
	end
	if (
		( O_IR_expected_prev[4] !== 1'bx ) && ( O_IR_prev[4] !== O_IR_expected_prev[4] )
		&& ((O_IR_expected_prev[4] !== last_O_IR_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[4] = O_IR_expected_prev[4];
	end
	if (
		( O_IR_expected_prev[5] !== 1'bx ) && ( O_IR_prev[5] !== O_IR_expected_prev[5] )
		&& ((O_IR_expected_prev[5] !== last_O_IR_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[5] = O_IR_expected_prev[5];
	end
	if (
		( O_IR_expected_prev[6] !== 1'bx ) && ( O_IR_prev[6] !== O_IR_expected_prev[6] )
		&& ((O_IR_expected_prev[6] !== last_O_IR_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[6] = O_IR_expected_prev[6];
	end
	if (
		( O_IR_expected_prev[7] !== 1'bx ) && ( O_IR_prev[7] !== O_IR_expected_prev[7] )
		&& ((O_IR_expected_prev[7] !== last_O_IR_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[7] = O_IR_expected_prev[7];
	end
	if (
		( O_IR_expected_prev[8] !== 1'bx ) && ( O_IR_prev[8] !== O_IR_expected_prev[8] )
		&& ((O_IR_expected_prev[8] !== last_O_IR_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[8] = O_IR_expected_prev[8];
	end
	if (
		( O_IR_expected_prev[9] !== 1'bx ) && ( O_IR_prev[9] !== O_IR_expected_prev[9] )
		&& ((O_IR_expected_prev[9] !== last_O_IR_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[9] = O_IR_expected_prev[9];
	end
	if (
		( O_IR_expected_prev[10] !== 1'bx ) && ( O_IR_prev[10] !== O_IR_expected_prev[10] )
		&& ((O_IR_expected_prev[10] !== last_O_IR_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_expected_prev);
		$display ("     Real value = %b", O_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O_IR_exp[10] = O_IR_expected_prev[10];
	end
	if (
		( O_IR_LOAD_expected_prev !== 1'bx ) && ( O_IR_LOAD_prev !== O_IR_LOAD_expected_prev )
		&& ((O_IR_LOAD_expected_prev !== last_O_IR_LOAD_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_IR_LOAD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_IR_LOAD_expected_prev);
		$display ("     Real value = %b", O_IR_LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O_IR_LOAD_exp = O_IR_LOAD_expected_prev;
	end
	if (
		( O_OUT_expected_prev[0] !== 1'bx ) && ( O_OUT_prev[0] !== O_OUT_expected_prev[0] )
		&& ((O_OUT_expected_prev[0] !== last_O_OUT_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_OUT_expected_prev);
		$display ("     Real value = %b", O_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O_OUT_exp[0] = O_OUT_expected_prev[0];
	end
	if (
		( O_OUT_expected_prev[1] !== 1'bx ) && ( O_OUT_prev[1] !== O_OUT_expected_prev[1] )
		&& ((O_OUT_expected_prev[1] !== last_O_OUT_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_OUT_expected_prev);
		$display ("     Real value = %b", O_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O_OUT_exp[1] = O_OUT_expected_prev[1];
	end
	if (
		( O_OUT_expected_prev[2] !== 1'bx ) && ( O_OUT_prev[2] !== O_OUT_expected_prev[2] )
		&& ((O_OUT_expected_prev[2] !== last_O_OUT_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_OUT_expected_prev);
		$display ("     Real value = %b", O_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O_OUT_exp[2] = O_OUT_expected_prev[2];
	end
	if (
		( O_OUT_expected_prev[3] !== 1'bx ) && ( O_OUT_prev[3] !== O_OUT_expected_prev[3] )
		&& ((O_OUT_expected_prev[3] !== last_O_OUT_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_OUT_expected_prev);
		$display ("     Real value = %b", O_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O_OUT_exp[3] = O_OUT_expected_prev[3];
	end
	if (
		( O_OUT_LOAD_expected_prev !== 1'bx ) && ( O_OUT_LOAD_prev !== O_OUT_LOAD_expected_prev )
		&& ((O_OUT_LOAD_expected_prev !== last_O_OUT_LOAD_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_OUT_LOAD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_OUT_LOAD_expected_prev);
		$display ("     Real value = %b", O_OUT_LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O_OUT_LOAD_exp = O_OUT_LOAD_expected_prev;
	end
	if (
		( O_PC_expected_prev[0] !== 1'bx ) && ( O_PC_prev[0] !== O_PC_expected_prev[0] )
		&& ((O_PC_expected_prev[0] !== last_O_PC_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_PC_expected_prev);
		$display ("     Real value = %b", O_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O_PC_exp[0] = O_PC_expected_prev[0];
	end
	if (
		( O_PC_expected_prev[1] !== 1'bx ) && ( O_PC_prev[1] !== O_PC_expected_prev[1] )
		&& ((O_PC_expected_prev[1] !== last_O_PC_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_PC_expected_prev);
		$display ("     Real value = %b", O_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O_PC_exp[1] = O_PC_expected_prev[1];
	end
	if (
		( O_PC_expected_prev[2] !== 1'bx ) && ( O_PC_prev[2] !== O_PC_expected_prev[2] )
		&& ((O_PC_expected_prev[2] !== last_O_PC_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_PC_expected_prev);
		$display ("     Real value = %b", O_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O_PC_exp[2] = O_PC_expected_prev[2];
	end
	if (
		( O_PC_expected_prev[3] !== 1'bx ) && ( O_PC_prev[3] !== O_PC_expected_prev[3] )
		&& ((O_PC_expected_prev[3] !== last_O_PC_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_PC_expected_prev);
		$display ("     Real value = %b", O_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O_PC_exp[3] = O_PC_expected_prev[3];
	end
	if (
		( O_PC_expected_prev[4] !== 1'bx ) && ( O_PC_prev[4] !== O_PC_expected_prev[4] )
		&& ((O_PC_expected_prev[4] !== last_O_PC_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_PC_expected_prev);
		$display ("     Real value = %b", O_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O_PC_exp[4] = O_PC_expected_prev[4];
	end
	if (
		( O_PC_COUNT_expected_prev !== 1'bx ) && ( O_PC_COUNT_prev !== O_PC_COUNT_expected_prev )
		&& ((O_PC_COUNT_expected_prev !== last_O_PC_COUNT_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_PC_COUNT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_PC_COUNT_expected_prev);
		$display ("     Real value = %b", O_PC_COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O_PC_COUNT_exp = O_PC_COUNT_expected_prev;
	end
	if (
		( O_PC_LOAD_expected_prev !== 1'bx ) && ( O_PC_LOAD_prev !== O_PC_LOAD_expected_prev )
		&& ((O_PC_LOAD_expected_prev !== last_O_PC_LOAD_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_PC_LOAD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_PC_LOAD_expected_prev);
		$display ("     Real value = %b", O_PC_LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O_PC_LOAD_exp = O_PC_LOAD_expected_prev;
	end
	if (
		( O_Q_expected_prev !== 1'bx ) && ( O_Q_prev !== O_Q_expected_prev )
		&& ((O_Q_expected_prev !== last_O_Q_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_Q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_Q_expected_prev);
		$display ("     Real value = %b", O_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O_Q_exp = O_Q_expected_prev;
	end
	if (
		( O_R0_expected_prev[0] !== 1'bx ) && ( O_R0_prev[0] !== O_R0_expected_prev[0] )
		&& ((O_R0_expected_prev[0] !== last_O_R0_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R0_expected_prev);
		$display ("     Real value = %b", O_R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O_R0_exp[0] = O_R0_expected_prev[0];
	end
	if (
		( O_R0_expected_prev[1] !== 1'bx ) && ( O_R0_prev[1] !== O_R0_expected_prev[1] )
		&& ((O_R0_expected_prev[1] !== last_O_R0_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R0_expected_prev);
		$display ("     Real value = %b", O_R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O_R0_exp[1] = O_R0_expected_prev[1];
	end
	if (
		( O_R0_expected_prev[2] !== 1'bx ) && ( O_R0_prev[2] !== O_R0_expected_prev[2] )
		&& ((O_R0_expected_prev[2] !== last_O_R0_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R0_expected_prev);
		$display ("     Real value = %b", O_R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O_R0_exp[2] = O_R0_expected_prev[2];
	end
	if (
		( O_R0_expected_prev[3] !== 1'bx ) && ( O_R0_prev[3] !== O_R0_expected_prev[3] )
		&& ((O_R0_expected_prev[3] !== last_O_R0_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R0_expected_prev);
		$display ("     Real value = %b", O_R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O_R0_exp[3] = O_R0_expected_prev[3];
	end
	if (
		( O_R0_LOAD_expected_prev !== 1'bx ) && ( O_R0_LOAD_prev !== O_R0_LOAD_expected_prev )
		&& ((O_R0_LOAD_expected_prev !== last_O_R0_LOAD_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R0_LOAD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R0_LOAD_expected_prev);
		$display ("     Real value = %b", O_R0_LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_O_R0_LOAD_exp = O_R0_LOAD_expected_prev;
	end
	if (
		( O_R1_expected_prev[0] !== 1'bx ) && ( O_R1_prev[0] !== O_R1_expected_prev[0] )
		&& ((O_R1_expected_prev[0] !== last_O_R1_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R1_expected_prev);
		$display ("     Real value = %b", O_R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_O_R1_exp[0] = O_R1_expected_prev[0];
	end
	if (
		( O_R1_expected_prev[1] !== 1'bx ) && ( O_R1_prev[1] !== O_R1_expected_prev[1] )
		&& ((O_R1_expected_prev[1] !== last_O_R1_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R1_expected_prev);
		$display ("     Real value = %b", O_R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_O_R1_exp[1] = O_R1_expected_prev[1];
	end
	if (
		( O_R1_expected_prev[2] !== 1'bx ) && ( O_R1_prev[2] !== O_R1_expected_prev[2] )
		&& ((O_R1_expected_prev[2] !== last_O_R1_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R1_expected_prev);
		$display ("     Real value = %b", O_R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_O_R1_exp[2] = O_R1_expected_prev[2];
	end
	if (
		( O_R1_expected_prev[3] !== 1'bx ) && ( O_R1_prev[3] !== O_R1_expected_prev[3] )
		&& ((O_R1_expected_prev[3] !== last_O_R1_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R1_expected_prev);
		$display ("     Real value = %b", O_R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_O_R1_exp[3] = O_R1_expected_prev[3];
	end
	if (
		( O_R1_LOAD_expected_prev !== 1'bx ) && ( O_R1_LOAD_prev !== O_R1_LOAD_expected_prev )
		&& ((O_R1_LOAD_expected_prev !== last_O_R1_LOAD_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R1_LOAD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R1_LOAD_expected_prev);
		$display ("     Real value = %b", O_R1_LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_O_R1_LOAD_exp = O_R1_LOAD_expected_prev;
	end
	if (
		( O_R2_expected_prev[0] !== 1'bx ) && ( O_R2_prev[0] !== O_R2_expected_prev[0] )
		&& ((O_R2_expected_prev[0] !== last_O_R2_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R2_expected_prev);
		$display ("     Real value = %b", O_R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_O_R2_exp[0] = O_R2_expected_prev[0];
	end
	if (
		( O_R2_expected_prev[1] !== 1'bx ) && ( O_R2_prev[1] !== O_R2_expected_prev[1] )
		&& ((O_R2_expected_prev[1] !== last_O_R2_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R2_expected_prev);
		$display ("     Real value = %b", O_R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_O_R2_exp[1] = O_R2_expected_prev[1];
	end
	if (
		( O_R2_expected_prev[2] !== 1'bx ) && ( O_R2_prev[2] !== O_R2_expected_prev[2] )
		&& ((O_R2_expected_prev[2] !== last_O_R2_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R2_expected_prev);
		$display ("     Real value = %b", O_R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_O_R2_exp[2] = O_R2_expected_prev[2];
	end
	if (
		( O_R2_expected_prev[3] !== 1'bx ) && ( O_R2_prev[3] !== O_R2_expected_prev[3] )
		&& ((O_R2_expected_prev[3] !== last_O_R2_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R2_expected_prev);
		$display ("     Real value = %b", O_R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_O_R2_exp[3] = O_R2_expected_prev[3];
	end
	if (
		( O_R2_LOAD_expected_prev !== 1'bx ) && ( O_R2_LOAD_prev !== O_R2_LOAD_expected_prev )
		&& ((O_R2_LOAD_expected_prev !== last_O_R2_LOAD_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_R2_LOAD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_R2_LOAD_expected_prev);
		$display ("     Real value = %b", O_R2_LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_O_R2_LOAD_exp = O_R2_LOAD_expected_prev;
	end
	if (
		( O_Rd_expected_prev[0] !== 1'bx ) && ( O_Rd_prev[0] !== O_Rd_expected_prev[0] )
		&& ((O_Rd_expected_prev[0] !== last_O_Rd_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_Rd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_Rd_expected_prev);
		$display ("     Real value = %b", O_Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_O_Rd_exp[0] = O_Rd_expected_prev[0];
	end
	if (
		( O_Rd_expected_prev[1] !== 1'bx ) && ( O_Rd_prev[1] !== O_Rd_expected_prev[1] )
		&& ((O_Rd_expected_prev[1] !== last_O_Rd_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_Rd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_Rd_expected_prev);
		$display ("     Real value = %b", O_Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_O_Rd_exp[1] = O_Rd_expected_prev[1];
	end
	if (
		( O_S_expected_prev !== 1'bx ) && ( O_S_prev !== O_S_expected_prev )
		&& ((O_S_expected_prev !== last_O_S_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_S :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_S_expected_prev);
		$display ("     Real value = %b", O_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_O_S_exp = O_S_expected_prev;
	end
	if (
		( O_S1_expected_prev[0] !== 1'bx ) && ( O_S1_prev[0] !== O_S1_expected_prev[0] )
		&& ((O_S1_expected_prev[0] !== last_O_S1_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_S1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_S1_expected_prev);
		$display ("     Real value = %b", O_S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_O_S1_exp[0] = O_S1_expected_prev[0];
	end
	if (
		( O_S1_expected_prev[1] !== 1'bx ) && ( O_S1_prev[1] !== O_S1_expected_prev[1] )
		&& ((O_S1_expected_prev[1] !== last_O_S1_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_S1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_S1_expected_prev);
		$display ("     Real value = %b", O_S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_O_S1_exp[1] = O_S1_expected_prev[1];
	end
	if (
		( O_S2_expected_prev[0] !== 1'bx ) && ( O_S2_prev[0] !== O_S2_expected_prev[0] )
		&& ((O_S2_expected_prev[0] !== last_O_S2_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_S2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_S2_expected_prev);
		$display ("     Real value = %b", O_S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_O_S2_exp[0] = O_S2_expected_prev[0];
	end
	if (
		( O_S2_expected_prev[1] !== 1'bx ) && ( O_S2_prev[1] !== O_S2_expected_prev[1] )
		&& ((O_S2_expected_prev[1] !== last_O_S2_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_S2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_S2_expected_prev);
		$display ("     Real value = %b", O_S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_O_S2_exp[1] = O_S2_expected_prev[1];
	end
	if (
		( O_SC_CLEAR_expected_prev !== 1'bx ) && ( O_SC_CLEAR_prev !== O_SC_CLEAR_expected_prev )
		&& ((O_SC_CLEAR_expected_prev !== last_O_SC_CLEAR_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_SC_CLEAR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_SC_CLEAR_expected_prev);
		$display ("     Real value = %b", O_SC_CLEAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_O_SC_CLEAR_exp = O_SC_CLEAR_expected_prev;
	end
	if (
		( O_SP_COUNT_expected_prev !== 1'bx ) && ( O_SP_COUNT_prev !== O_SP_COUNT_expected_prev )
		&& ((O_SP_COUNT_expected_prev !== last_O_SP_COUNT_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_SP_COUNT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_SP_COUNT_expected_prev);
		$display ("     Real value = %b", O_SP_COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_O_SP_COUNT_exp = O_SP_COUNT_expected_prev;
	end
	if (
		( O_STACK_MEM_WREN_expected_prev !== 1'bx ) && ( O_STACK_MEM_WREN_prev !== O_STACK_MEM_WREN_expected_prev )
		&& ((O_STACK_MEM_WREN_expected_prev !== last_O_STACK_MEM_WREN_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_STACK_MEM_WREN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_STACK_MEM_WREN_expected_prev);
		$display ("     Real value = %b", O_STACK_MEM_WREN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_O_STACK_MEM_WREN_exp = O_STACK_MEM_WREN_expected_prev;
	end
	if (
		( O_T_expected_prev[0] !== 1'bx ) && ( O_T_prev[0] !== O_T_expected_prev[0] )
		&& ((O_T_expected_prev[0] !== last_O_T_exp[0]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_T[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_T_expected_prev);
		$display ("     Real value = %b", O_T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_O_T_exp[0] = O_T_expected_prev[0];
	end
	if (
		( O_T_expected_prev[1] !== 1'bx ) && ( O_T_prev[1] !== O_T_expected_prev[1] )
		&& ((O_T_expected_prev[1] !== last_O_T_exp[1]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_T[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_T_expected_prev);
		$display ("     Real value = %b", O_T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_O_T_exp[1] = O_T_expected_prev[1];
	end
	if (
		( O_T_expected_prev[2] !== 1'bx ) && ( O_T_prev[2] !== O_T_expected_prev[2] )
		&& ((O_T_expected_prev[2] !== last_O_T_exp[2]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_T[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_T_expected_prev);
		$display ("     Real value = %b", O_T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_O_T_exp[2] = O_T_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module 2021510008_Alperen_Aydin_Group19_Lab8_Project_CONTROL_UNIT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] INP_DATA;
reg INP_LOAD;
reg MASTER_CLOCK;
reg MEMORY_CLOCK;
// wires                                               
wire [3:0] O_AR;
wire O_AR_LOAD;
wire [3:0] O_D;
wire O_DATA_MEM_WREN;
wire O_E;
wire O_F;
wire [3:0] O_INP;
wire [10:0] O_IR;
wire O_IR_LOAD;
wire [3:0] O_OUT;
wire O_OUT_LOAD;
wire [4:0] O_PC;
wire O_PC_COUNT;
wire O_PC_LOAD;
wire O_Q;
wire [3:0] O_R0;
wire O_R0_LOAD;
wire [3:0] O_R1;
wire O_R1_LOAD;
wire [3:0] O_R2;
wire O_R2_LOAD;
wire [1:0] O_Rd;
wire O_S;
wire [1:0] O_S1;
wire [1:0] O_S2;
wire O_SC_CLEAR;
wire O_SP_COUNT;
wire O_STACK_MEM_WREN;
wire [2:0] O_T;

wire sampler;                             

// assign statements (if any)                          
2021510008_Alperen_Aydin_Group19_Lab8_Project_CONTROL_UNIT i1 (
// port map - connection between master ports and signals/registers   
	.INP_DATA(INP_DATA),
	.INP_LOAD(INP_LOAD),
	.MASTER_CLOCK(MASTER_CLOCK),
	.MEMORY_CLOCK(MEMORY_CLOCK),
	.O_AR(O_AR),
	.O_AR_LOAD(O_AR_LOAD),
	.O_D(O_D),
	.O_DATA_MEM_WREN(O_DATA_MEM_WREN),
	.O_E(O_E),
	.O_F(O_F),
	.O_INP(O_INP),
	.O_IR(O_IR),
	.O_IR_LOAD(O_IR_LOAD),
	.O_OUT(O_OUT),
	.O_OUT_LOAD(O_OUT_LOAD),
	.O_PC(O_PC),
	.O_PC_COUNT(O_PC_COUNT),
	.O_PC_LOAD(O_PC_LOAD),
	.O_Q(O_Q),
	.O_R0(O_R0),
	.O_R0_LOAD(O_R0_LOAD),
	.O_R1(O_R1),
	.O_R1_LOAD(O_R1_LOAD),
	.O_R2(O_R2),
	.O_R2_LOAD(O_R2_LOAD),
	.O_Rd(O_Rd),
	.O_S(O_S),
	.O_S1(O_S1),
	.O_S2(O_S2),
	.O_SC_CLEAR(O_SC_CLEAR),
	.O_SP_COUNT(O_SP_COUNT),
	.O_STACK_MEM_WREN(O_STACK_MEM_WREN),
	.O_T(O_T)
);

// MEMORY_CLOCK
always
begin
	MEMORY_CLOCK = 1'b0;
	MEMORY_CLOCK = #5000 1'b1;
	#5000;
end 

// MASTER_CLOCK
initial
begin
	MASTER_CLOCK = 1'b0;
	MASTER_CLOCK = #20000 1'b1;
	# 10000;
	repeat(48)
	begin
		MASTER_CLOCK = 1'b0;
		MASTER_CLOCK = #10000 1'b1;
		# 10000;
	end
	MASTER_CLOCK = 1'b0;
end 

2021510008_Alperen_Aydin_Group19_Lab8_Project_CONTROL_UNIT_vlg_sample_tst tb_sample (
	.INP_DATA(INP_DATA),
	.INP_LOAD(INP_LOAD),
	.MASTER_CLOCK(MASTER_CLOCK),
	.MEMORY_CLOCK(MEMORY_CLOCK),
	.sampler_tx(sampler)
);

2021510008_Alperen_Aydin_Group19_Lab8_Project_CONTROL_UNIT_vlg_check_tst tb_out(
	.O_AR(O_AR),
	.O_AR_LOAD(O_AR_LOAD),
	.O_D(O_D),
	.O_DATA_MEM_WREN(O_DATA_MEM_WREN),
	.O_E(O_E),
	.O_F(O_F),
	.O_INP(O_INP),
	.O_IR(O_IR),
	.O_IR_LOAD(O_IR_LOAD),
	.O_OUT(O_OUT),
	.O_OUT_LOAD(O_OUT_LOAD),
	.O_PC(O_PC),
	.O_PC_COUNT(O_PC_COUNT),
	.O_PC_LOAD(O_PC_LOAD),
	.O_Q(O_Q),
	.O_R0(O_R0),
	.O_R0_LOAD(O_R0_LOAD),
	.O_R1(O_R1),
	.O_R1_LOAD(O_R1_LOAD),
	.O_R2(O_R2),
	.O_R2_LOAD(O_R2_LOAD),
	.O_Rd(O_Rd),
	.O_S(O_S),
	.O_S1(O_S1),
	.O_S2(O_S2),
	.O_SC_CLEAR(O_SC_CLEAR),
	.O_SP_COUNT(O_SP_COUNT),
	.O_STACK_MEM_WREN(O_STACK_MEM_WREN),
	.O_T(O_T),
	.sampler_rx(sampler)
);
endmodule

