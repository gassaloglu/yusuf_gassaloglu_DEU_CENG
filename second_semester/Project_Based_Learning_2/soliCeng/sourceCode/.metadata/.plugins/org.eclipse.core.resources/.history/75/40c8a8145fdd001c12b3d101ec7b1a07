package columns;

import enigma.console.Console;
import enigma.console.TextAttributes;
import enigma.core.Enigma;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

public class Columns {
	
	static Console console = Enigma.getConsole("Columns",155,50,15);

	DoubleLinkedList highScoreTable;
	MultiLinkedList columns;
	SingleLinkedList box;

	static int boxNumber=0;
	int selectY = 0;
	int selectX = 0;
	static boolean filled=false;

	// player properties and scoring variables
	String playerName;
	double endGameScore;
	int transferCounter;
	static int finishedOrderSets, playerScore;

	// ------ Standard variables for keyboard ------
	public KeyListener klis;
	public boolean keypr; // key pressed?
	public int rkey; // key (for press/release)
	static boolean boxUsed=true;
	boolean boxEnterPressed = false; // check in the box if pressed enter key

	//main game loop variable
	boolean loop = true;
	// language variables
	String language;
	String [] languages;


	Columns(){
		languages = new String[]{"English","Espanol"}; // all contained languages
		language = languages[0]; // default language
		klis = new KeyListener() {
			public void keyTyped(KeyEvent e) {
			}

			public void keyPressed(KeyEvent e) {
				if (!keypr) {
					keypr = true;
					rkey = e.getKeyCode();
				}
			}

			public void keyReleased(KeyEvent e) {
			}
		};
		console.getTextWindow().addKeyListener(klis);

		menu();
	}

	void menu() {
		Scanner input = new Scanner(System.in);
		readHighScoreTable();
		// sound track
		try {
			File file = new File("Grani.wav");
			AudioInputStream audioStream = AudioSystem.getAudioInputStream(file);
			Clip clip = AudioSystem.getClip();
			clip.open(audioStream);
			clip.start();

			clip.loop(10000);
		} catch (Exception e) {
			System.out.println(e);
		}

		console.getTextWindow().setCursorPosition(0, 0);
		int chosen= 1;
		//coloring background
		setBackgroundColor(0.03, 0.49, 0.53);
		for (int i = 0; i < 49; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
		while (true) {
			printMenu(chosen);
			 if (keypr == true) {
				//to play related sound
				keypr = false;
				 switch (rkey) {
				case KeyEvent.VK_UP:
					try {
						File wavFile = new File("menu.wav");
						Clip clip = AudioSystem.getClip();
						clip.open(AudioSystem.getAudioInputStream(wavFile));
						clip.start();
					} catch (Exception e) {
						System.out.println(e);
					}
					 case KeyEvent.VK_LEFT:
						 try {
								File wavFile = new File("menu.wav");
								Clip clip = AudioSystem.getClip();
								clip.open(AudioSystem.getAudioInputStream(wavFile));
								clip.start();
							} catch (Exception e) {
								System.out.println(e);
							}
						 if (chosen == 1 )
						chosen =4;
					else
						chosen--;
					break;
				case KeyEvent.VK_DOWN:
					try {
						File wavFile = new File("menu.wav");
						Clip clip = AudioSystem.getClip();
						clip.open(AudioSystem.getAudioInputStream(wavFile));
						clip.start();
					} catch (Exception e) {
						System.out.println(e);
					}
					 case KeyEvent.VK_RIGHT:
						 try {
								File wavFile = new File("menu.wav");
								Clip clip = AudioSystem.getClip();
								clip.open(AudioSystem.getAudioInputStream(wavFile));
								clip.start();
							} catch (Exception e) {
								System.out.println(e);
							}
						 if (chosen == 4 )
						chosen =1;
					else
						chosen++;
					break;
					 case KeyEvent.VK_ENTER:
						 try {
								File wavFile = new File("menu.wav");
								Clip clip = AudioSystem.getClip();
								clip.open(AudioSystem.getAudioInputStream(wavFile));
								clip.start();
							} catch (Exception e) {
								System.out.println(e);
							}
					switch (chosen) {
					case 1:
						loop = true;
						consoleClear();
						// player name input process
						console.getTextWindow().setCursorPosition(0,0);
						if (language.equalsIgnoreCase(languages[0])) { // language check
							System.out.print("\n" +
									" __  ______  __  _____    _  _____   __  _______  _   \n" +
									" \\ \\/ / __ \\/ / / / _ \\  / |/ / _ | /  |/  / __/ (_)  \n" +
									"  \\  / /_/ / /_/ / , _/ /    / __ |/ /|_/ / _/  _     \n" +
									"  /_/\\____/\\____/_/|_| /_/|_/_/ |_/_/  /_/___/ (_)    \n" +
									"                                                      ");
						}
						else if (language.equalsIgnoreCase(languages[1])){
							System.out.print("\n" +
									"   ______  __  _  ______  __  ______  ___  ____  _ \n" +
									"  / __/ / / / / |/ / __ \\/  |/  / _ )/ _ \\/ __/ (_)\n" +
									" _\\ \\/ /_/ / /    / /_/ / /|_/ / _  / , _/ _/  _   \n" +
									"/___/\\____/ /_/|_/\\____/_/  /_/____/_/|_/___/ (_)  \n" +
									"                                                   ");
						}
						console.getTextWindow().setCursorPosition(55,3);
						playerName = input.nextLine(); // take the input
						consoleClear();
						// start the game
						columnsGamePlay();
						break;
					case 2:
						options(); // options section
						break;
					case 3:
						readHighScoreTable();
						consoleClear();
						hiscores();
						break;
					case 4:
						System.exit(0);
						break;
					}
					break;
				}
			}
		}
	}

	// hiscores section function
	void hiscores() {
		if(language.equalsIgnoreCase(languages[0])) { // language check
			console.getTextWindow().setCursorPosition(70, 13);
			System.out.println("HIGH SCORE TABLE");
		}
		else if(language.equalsIgnoreCase(languages[1])) {
			console.getTextWindow().setCursorPosition(67, 13);
			System.out.println("TABLA DE PUNTUACION ALTA");
		}
		highScoreTable.sort();
		highScoreTable.display1(70,15);
		
		console.getTextWindow().setCursorPosition(51, 40);
		if(language.equalsIgnoreCase(languages[0])) // language check
			System.out.println("Please press any letter then press enter to go to main menu.");
		else if(language.equalsIgnoreCase(languages[1]))
			System.out.println("Presione cualquier letra y luego presione enter para ir al menu principal.");
		Scanner sc = new Scanner(System.in);
		String a = sc.nextLine();
		consoleClear();
		
	}
	void consoleClear() {
		console.getTextWindow().setCursorPosition(0, 0);
		for (int i = 0; i < 49; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
	}


	void options(){ // options selection
		consoleClear();
		int selection = 1;
		boolean optionsLoop = true;
		while(optionsLoop) {
			printOptions(selection);

			if (keypr == true) {
				switch (rkey){ // key moving
					case (KeyEvent.VK_LEFT): // change the values depending on the direction
						console.getTextWindow().setCursorPosition(81,22);
						System.out.println("\t\t\t\t\t\t\t");
						if (selection == 1)
							selection = 2;
						else
							selection--;
						break;
					case (KeyEvent.VK_RIGHT):
						console.getTextWindow().setCursorPosition(81,22);
						System.out.println("\t\t\t\t\t\t\t");
						if (selection == languages.length)
							selection = 1;
						else
							selection++;
						break;
					case (KeyEvent.VK_ESCAPE): // quit from the options screen
						optionsLoop = false;
						consoleClear();
						break;
					case (KeyEvent.VK_ENTER): // enter <-> select the language
						language = languages[selection - 1];
						optionsLoop = false; // exit from the options screen
						consoleClear();
						break;
				}
				keypr = false; // refresh if key pressed
			}
		}
	}


	void printOptions(int selection){ // options screen
		if (language.equalsIgnoreCase(languages[0])){ // language check
			console.getTextWindow().setCursorPosition(75,20);
			System.out.println("Select your language");
		}
		else if (language.equalsIgnoreCase(languages[1])){
			console.getTextWindow().setCursorPosition(75,20);
			System.out.println("Elige tu idioma");
		}
		console.getTextWindow().setCursorPosition(81,22);
		switch (selection){ // print languages
			case 1:
				console.getTextWindow().setCursorPosition(81,22);
				System.out.println(languages[0]);
				break;
			case 2:
				console.getTextWindow().setCursorPosition(81,22);
				System.out.println(languages[1]);
				break;
		}
	}

	//menu drawing
	void printMenu(int index) {

		setBackgroundColor(0.21, 0.1, 0.16);
		setForegroundColor(0.03, 0.49, 0.53);

		console.getTextWindow().setCursorPosition(0, 8);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(0, 9);System.out.println("       .------.\r    .------.\r        ");
		console.getTextWindow().setCursorPosition(0, 10);System.out.println("       |7.--. |\r    |9.--. |\r        ");
		console.getTextWindow().setCursorPosition(0, 11);System.out.println("       | :/\\: |\r    | :/\\: |\r        ");
		console.getTextWindow().setCursorPosition(0, 12);System.out.println("       | (__) |\r    | (__) |\r        ");
		console.getTextWindow().setCursorPosition(0, 13);System.out.println("       | '--'7|\r    | '--'9|\r        ");
		console.getTextWindow().setCursorPosition(0, 14);System.out.println("       `------'    `------'        ");
		console.getTextWindow().setCursorPosition(0, 15);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(0, 16);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(35, 8);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 9);System.out.println("  ______      ___      _____      _____     ______   ________   ____  _____     ______      \r");
		console.getTextWindow().setCursorPosition(35, 10);System.out.println(".' ____ \\   .'   `.   |_   _|    |_   _|  .' ___  | |_   __  | |_   \\|_   _|  .' ___  |     \r");
		console.getTextWindow().setCursorPosition(35, 11);System.out.println("| (___ \\_| /  .-.  \\    | |        | |   / .'   \\_|   | |_ \\_|   |   \\ | |   / .'   \\_|     \r");
		console.getTextWindow().setCursorPosition(35, 12);System.out.println(" _.____`.  | |   | |    | |   _    | |   | |          |  _| _    | |\\ \\| |   | |   ____     \r");
		console.getTextWindow().setCursorPosition(35, 13);System.out.println("| \\____) | \\  `-'  /   _| |__/ |  _| |_  \\ `.___.'\\  _| |__/ |  _| |_\\   |_  \\ `.___]       \r");
		console.getTextWindow().setCursorPosition(35, 14);System.out.println(" \\______.'  `.___.'   |________| |_____|  `.____ .' |________| |_____|\\____|  `._____.'     \r");
		console.getTextWindow().setCursorPosition(35, 15);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 16);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(125, 9);System.out.println("  .------.\r    .------.\r       ");
		console.getTextWindow().setCursorPosition(125, 10);System.out.println("  |5.--. |\r    |8.--. |\r       ");
		console.getTextWindow().setCursorPosition(125, 11);System.out.println("  | :/\\: |\r    | :/\\: |\r       ");
		console.getTextWindow().setCursorPosition(125, 12);System.out.println("  |  \\/  |\r    |  \\/  |\r       ");
		console.getTextWindow().setCursorPosition(125, 13);System.out.println("  | '--'7|\r    | '--'9|\r       ");
		console.getTextWindow().setCursorPosition(125, 14);System.out.println("  `------'    `------'       ");

		setBackgroundColor(0.03, 0.49, 0.53);

		if (index == 1)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		if (language.equalsIgnoreCase(languages[0])) {
			console.getTextWindow().setCursorPosition(15, 19);
			System.out.println(" ___  _    ___  _ _ \r");
			console.getTextWindow().setCursorPosition(15, 20);
			System.out.println("| . \\| |  | . || | |\r");
			console.getTextWindow().setCursorPosition(15, 21);
			System.out.println("|  _/| |_ |   |\\   /\r");
			console.getTextWindow().setCursorPosition(15, 22);
			System.out.println("|_|  |___||_|_| |_| ");
		}
		else if (language.equalsIgnoreCase(languages[1])) {
			console.getTextWindow().setCursorPosition(15, 19);
			System.out.println("  _  _ _  ___   ___  ___ \r");
			console.getTextWindow().setCursorPosition(15, 20);
			System.out.println(" | || | |/  _> | . || . \\\r");
			console.getTextWindow().setCursorPosition(15, 21);
			System.out.println("_| || ' || <_/\\|   ||   /\r");
			console.getTextWindow().setCursorPosition(15, 22);
			System.out.println("\\__/`___'`____/|_|_||_\\_\\\r");
		}

		if (index == 2)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		if (language.equalsIgnoreCase(languages[0])) {
			console.getTextWindow().setCursorPosition(35, 23);
			System.out.println(" ___  ___  ___  _  ___  _ _  ___ \r");
			console.getTextWindow().setCursorPosition(35, 24);
			System.out.println("| . || . \\|_ _|| || . || \\ |/ __>\r");
			console.getTextWindow().setCursorPosition(35, 25);
			System.out.println("| | ||  _/ | | | || | ||   |\\__ \\\r");
			console.getTextWindow().setCursorPosition(35, 26);
			System.out.println("`___'|_|   |_| |_|`___'|_\\_|<___/");
		}
		else if (language.equalsIgnoreCase(languages[1])) {
			console.getTextWindow().setCursorPosition(35, 23);
			System.out.println(" ___  ___  ___  _  ___  _ _  ___  ___ \r");
			console.getTextWindow().setCursorPosition(35, 24);
			System.out.println("| . || . \\|  _>| || . || \\ || __>/ __>\r");
			console.getTextWindow().setCursorPosition(35, 25);
			System.out.println("| | ||  _/| <__| || | ||   || _> \\__ \\\r");
			console.getTextWindow().setCursorPosition(35, 26);
			System.out.println("`___'|_|  `___/|_|`___'|_\\_||___><___/");
		}
		
		if (index == 3)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		if (language.equalsIgnoreCase(languages[0])) {
			console.getTextWindow().setCursorPosition(65, 27);
			System.out.println(" _ _  _  ___  ___  ___  ___  ___  ___ \r");
			console.getTextWindow().setCursorPosition(65, 28);
			System.out.println("| | || |/ __>|  _>| . || . \\| __>/ __>\r");
			console.getTextWindow().setCursorPosition(65, 29);
			System.out.println("|   || |\\__ \\| <__| | ||   /| _> \\__ \r");
			console.getTextWindow().setCursorPosition(65, 30);
			System.out.println("|_|_||_|<___/`___/`___'|_\\_\\|___><___/\r");
		}
		else if (language.equalsIgnoreCase(languages[1])) {
			console.getTextWindow().setCursorPosition(65, 27);
			System.out.println(" ___  _ _  _ _  ___  ___  ___   ___  _   ___  ___ \r");
			console.getTextWindow().setCursorPosition(65, 28);
			System.out.println("| . \\| | || \\ ||_ _|| __>| . | | . || | |_ _|| . |\r");
			console.getTextWindow().setCursorPosition(65, 29);
			System.out.println("|  _/| ' ||   | | | | _> | | | |   || |_ | | | | |\r");
			console.getTextWindow().setCursorPosition(65, 30);
			System.out.println("|_|  `___'|_\\_| |_| |___>`___' |_|_||___||_| `___'\r");
		}
		
		if (index == 4) 
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		if (language.equalsIgnoreCase(languages[0])) {
			console.getTextWindow().setCursorPosition(105, 31);
			System.out.println(" ___ __  _ _  ___ \r");
			console.getTextWindow().setCursorPosition(105, 32);
			System.out.println("| __>\\ \\/ | ||_ _|\r");
			console.getTextWindow().setCursorPosition(105, 33);
			System.out.println("| _>  \\ \\ | | | | \r");
			console.getTextWindow().setCursorPosition(105, 34);
			System.out.println("|___>_/\\_\\|_| |_| \r");
		}
		else if (language.equalsIgnoreCase(languages[1])) {
			console.getTextWindow().setCursorPosition(105, 31);
			System.out.println(" ___  ___  _    _  ___  ___ \r");
			console.getTextWindow().setCursorPosition(105, 32);
			System.out.println("/ __>| . || |  | || . \\| . |\r");
			console.getTextWindow().setCursorPosition(105, 33);
			System.out.println("\\__ \\|   || |_ | || | ||   |\r");
			console.getTextWindow().setCursorPosition(105, 34);
			System.out.println("<___/|_|_||___||_||___/|_|_|\r");
		}
		setForegroundColor(0.91, 0.76, 0.83);
	}


	void endOfTheGame(){ // end of the game
		setForegroundColor(0.03, 0.49, 0.53);
		if (finishedOrderSets != 5){ // if lose
			console.getTextWindow().setCursorPosition(45, 20);
			if (language.equalsIgnoreCase(languages[1])) {
				System.out.println("Perdiste!!");
				console.getTextWindow().setCursorPosition(45, 21);
				System.out.println("Tu puntuacian no se calcula! Deberas haber completado todos los conjuntos!!");
			}
			else if(language.equalsIgnoreCase(languages[0])) {
				System.out.println("You LOST!!");
				console.getTextWindow().setCursorPosition(45, 21);
				System.out.println("Your score is not calculated! You should have completed all the sets!!");
			}
		}
		else { // if win
			endGameScore = 100 * finishedOrderSets + (playerScore / transferCounter); // calculate end game score
			highScoreTable.add(playerName + " " + endGameScore); // add the player to the table
			console.getTextWindow().setCursorPosition(70, 20);
			if(language.equalsIgnoreCase(languages[0]))
				System.out.println("Your Score :  " + endGameScore); // print end game score
			else if (language.equalsIgnoreCase(languages[1]))
				System.out.println("Tu Puntuacian :  " + endGameScore); // print end game score

			System.out.println();
			highScoreTable.sort();
			highScoreTable.display1(130,10); // sort the high score table and print it
			highScoreTable.display1(10,10); // sort the high score table and print it

		}
		
		console.getTextWindow().setCursorPosition(51, 40);
		System.out.println("Please press any letter then press enter to go to main menu.");
		Scanner sc = new Scanner(System.in);
		String a = sc.next();
		consoleClear();
		console.getTextWindow().setCursorPosition(0, 0);
		setBackgroundColor(0.03, 0.49, 0.53);
		for (int i = 0; i < 49; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
	}

	// main game function
	void columnsGamePlay() {

		// initialize the scoring variables
		transferCounter = 0;
		playerScore = 0;
		finishedOrderSets = 0;

		// initialize the linked lists
		columns = new MultiLinkedList();
		box = new SingleLinkedList();

		//setup
		box();
		console.getTextWindow().setCursorPosition(0, 0);
		initialDistribution();
		initialDisplay();
		console.getTextWindow().setCursorPosition(0, 0);

		//game play
		gameplay();

		if(!loop){ // if the game is over (win or lose)
			consoleClear();
			endOfTheGame();
		}
	}


	String converter(int selectX) {
		if(selectX==0)
			return "C1";
		else if(selectX==1)
			return "C2";
		else if(selectX==2)
			return "C3";
		else if(selectX==3)
			return "C4";
		else if(selectX==4)
			return "C5";
		return null;
	}


	// random number generator
	int randomNumber(int min, int max) {
	    int random_int = (int)Math.floor(Math.random()*(max-min+1)+min);
		return random_int;
	}


	void gameplay() {
		boxEnterPressed = false;
		drawCursor();
		loop = true;
		while (loop) {
			// print the score elements
			if (language.equalsIgnoreCase(languages[1])) { // language check
				console.getTextWindow().setCursorPosition(125, 10);
				System.out.println("Transferir : " + transferCounter);
				console.getTextWindow().setCursorPosition(125, 11);
				System.out.println("Conjuntos terminados : " + finishedOrderSets);
				console.getTextWindow().setCursorPosition(125, 12);
				System.out.println("Puntaje : " + playerScore);
			}
			else if (language.equalsIgnoreCase(languages[0])) {
				console.getTextWindow().setCursorPosition(130, 10);
				System.out.println("Transfer : " + transferCounter);
				console.getTextWindow().setCursorPosition(130, 11);
				System.out.println("Finished Sets : " + finishedOrderSets);
				console.getTextWindow().setCursorPosition(130, 12);
				System.out.println("Score : " + playerScore);
			}
			if (keypr) {
				switch(rkey) {
					case (KeyEvent.VK_ENTER): {
						if (selectX == 5&&boxUsed) {
							boxEnterPressed = true;
							boolean allowDraw = true;
							for (int i = 0; i < 5; i++) {
								if (columns.columnSize(i) == 0)
								{
									allowDraw = false;
									break;
								}
							}
							if (allowDraw) {
								//draw
								filled=true;

								setForegroundColor(0.91, 0.91, 0.83);

								// activate box
								boxNumber=(int)box.popTheHead();
								if (boxNumber!=10) {
									console.getTextWindow().setCursorPosition(132, 2);
									System.out.println(".------.\r");
									console.getTextWindow().setCursorPosition(132, 3);
									System.out.println("|" + boxNumber + ".--. |\r");
									console.getTextWindow().setCursorPosition(132, 4);
									System.out.println("| :/\\: |\r");
									console.getTextWindow().setCursorPosition(132, 5);
									System.out.println("| '--'" + boxNumber + "|\r");
									console.getTextWindow().setCursorPosition(132, 6);
									System.out.println("`------'\r");
								}
								else{
									console.getTextWindow().setCursorPosition(132, 2);
									System.out.println(".------.\r");
									console.getTextWindow().setCursorPosition(132, 3);
									System.out.println("|" + boxNumber + ".-. |\r");
									console.getTextWindow().setCursorPosition(132, 4);
									System.out.println("| :/\\: |\r");
									console.getTextWindow().setCursorPosition(132, 5);
									System.out.println("| '-'" + boxNumber + "|\r");
									console.getTextWindow().setCursorPosition(132, 6);
									System.out.println("`------'\r");
								}
								boxUsed=false;
							}
						}
						break;
					}
					case (KeyEvent.VK_UP): { // Goes to up
						if (selectX != 5) {
							clearCursor();
							if (selectY == 0) selectY = columns.columnSize(selectX) - 1;
							else selectY--;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_DOWN): { // Goes to down
						if (selectX != 5) {
							clearCursor();
							if (selectY == columns.columnSize(selectX) - 1) selectY = 0;
							else selectY++;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_LEFT): {// Goes to left
						if (selectX != 0) {
							int tempX = selectX;
							while (tempX != 0) {
								if (columns.columnSize(tempX - 1) == 0) {
									tempX--;
								}
								else {
									clearCursor();
									selectX = tempX - 1;
									if (selectY + 1 > columns.columnSize(selectX)) {
										selectY = columns.columnSize(selectX) - 1;
									}
									drawCursor();
									break;
								}
							}
						}
						break;
					}
					case (KeyEvent.VK_RIGHT): {// Goes to right
						if (selectX != 5) {
							clearCursor();
							while (true) {
								if (selectX != 4) {
									if (columns.columnSize(selectX + 1) == 0) {
										selectX++;
									}
									else break;
								}
								else break;
							}
							if (selectX != 4) {
								if (selectY + 1 > columns.columnSize(selectX + 1)) {
									selectY = columns.columnSize(selectX + 1) - 1;
								}
							}
							selectX++;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_Z):{// when we get cards we want we have to press z
						if(selectX<5) {
							columns.clearDisplay();
							CardNumberNode storage =  columns.search2(selectX, selectY);
							String tempColumn=converter(selectX);
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												}
												break;
											}
											case (KeyEvent.VK_X):{// when we put cards we took we have to press x
												//console.getTextWindow().setCursorPosition(0,2);
												int columnSize=sum(columns.nodeCounter(columns.takeData(selectX, 0)),columns.nodeCounter(storage));
												int lastData=columns.lastData(selectX,columns.columnSize(selectX));
												if(columns.columnSize(selectX)==0&&(storage.getCardNumber()==10||storage.getCardNumber()==1)) {
													boxUsed=true;
													String temp=converter(selectX);
													while (storage != null) {
														columns.addCard(temp,storage.getCardNumber());
														storage = storage.getNext();
													}
													loop1=false;
													transferCounter++; // increase the transfer count
												}
												else if((lastData==storage.getCardNumber() || lastData==storage.getCardNumber()+1 || lastData==storage.getCardNumber()-1)&&columnSize<19) {
													boxUsed=true;
													String column = converter(selectX);
													CardNumberNode temp=storage;
													while(temp!=null) {
														columns.addCard(column, temp.getCardNumber());
														temp=temp.getNext();
													}
													loop1=false;
													transferCounter++; // increase the transfer count
												}
												columns.clearDisplay();
												columns.display();
												break;
											}
											case (KeyEvent.VK_C):{
												CardNumberNode temp=storage;
												while(temp!=null) {
													columns.addCard(tempColumn, temp.getCardNumber());
													temp=temp.getNext();
												}
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
						
						//take from box and place it somewhere
						else if(selectX==5&&boxNumber!=0&&filled) { 
							filled=false;
							columns.clearDisplay();
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												}
												break;
											}
											case (KeyEvent.VK_X):{// when we put box card we took we have to press x
												if (selectX != 5) {
													int columnSize = sum(columns.nodeCounter(columns.takeData(selectX, 0)), 1);
													int lastData = columns.lastData(selectX, columns.columnSize(selectX));
													if (columns.columnSize(selectX) == 0 && (boxNumber == 10 || boxNumber == 1)) {
														String temp = converter(selectX);
														columns.addCard(temp, boxNumber);
														transferCounter++; // increase the transfer count
														loop1 = false;
														boxEnterPressed = false;
														clearCursor();
													} else if ((lastData == boxNumber || lastData == boxNumber + 1 || lastData == boxNumber - 1) && columnSize < 19) {
														boxUsed = true;
														String column = "";
														if (selectX == 0)
															column = "C1";
														else if (selectX == 1)
															column = "C2";
														else if (selectX == 2)
															column = "C3";
														else if (selectX == 3)
															column = "C4";
														else if (selectX == 4)
															column = "C5";
														columns.addCard(column, boxNumber);
														transferCounter++; // increase the transfer count
														loop1 = false;
													}

													columns.clearDisplay();
													columns.display();
												}
													break;
											}
											case (KeyEvent.VK_C):{
												filled = true;
												loop1 = false;
												boxUsed=false;

											}
										}
										if(selectX!=5)
											selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
					
						
						//update cursor position after transfer and set finding
						if (selectX != 5) {
							clearCursor();
							columns.findSet(selectX);
							if (columns.columnSize(selectX) == 0) {
								selectX = 5;
							}
							else {
								selectY = columns.columnSize(selectX) - 1;
							}
							drawCursor();
						}
						columns.clearDisplay();
						columns.display();
						
						if (filled) {
							if (boxNumber!=10) {
								console.getTextWindow().setCursorPosition(132, 2);
								System.out.println(".------.\r");
								console.getTextWindow().setCursorPosition(132, 3);
								System.out.println("|" + boxNumber + ".--. |\r");
								console.getTextWindow().setCursorPosition(132, 4);
								System.out.println("| :/\\: |\r");
								console.getTextWindow().setCursorPosition(132, 5);
								System.out.println("| '--'" + boxNumber + "|\r");
								console.getTextWindow().setCursorPosition(132, 6);
								System.out.println("`------'\r");
							}
							else{
								console.getTextWindow().setCursorPosition(132, 2);
								System.out.println(".------.\r");
								console.getTextWindow().setCursorPosition(132, 3);
								System.out.println("|" + boxNumber + ".-. |\r");
								console.getTextWindow().setCursorPosition(132, 4);
								System.out.println("| :/\\: |\r");
								console.getTextWindow().setCursorPosition(132, 5);
								System.out.println("| '-'" + boxNumber + "|\r");
								console.getTextWindow().setCursorPosition(132, 6);
								System.out.println("`------'\r");
							}
						}
						break;
					}
					case (KeyEvent.VK_ESCAPE):{ // exit the game
						loop = false;
						break;
					}
				}
				keypr = false;
			}
			try { Thread.sleep(50); } catch (InterruptedException e) {}

			if (finishedOrderSets == 5) // if all the sets are completed
				loop = false;
		}
	}


	int sum(int x,int y) {
		return x+y;
	}

	//method for visual cursor movement
	void clearCursor() {
		if (selectX == 5) {
			if (!boxEnterPressed) {
				// clear box after using
				console.getTextWindow().setCursorPosition(132, 2);
				System.out.println(".------.\r");
				console.getTextWindow().setCursorPosition(132, 3);
				System.out.println("| .--. |\r");
				console.getTextWindow().setCursorPosition(132, 4);
				System.out.println("| :/\\: |\r");
				console.getTextWindow().setCursorPosition(132, 5);
				System.out.println("| '--' |\r");
				console.getTextWindow().setCursorPosition(132, 6);
				System.out.println("`------'\r");
			}
			console.getTextWindow().setCursorPosition(131, 4);
			System.out.println(" ");
			console.getTextWindow().setCursorPosition(140, 4);
			System.out.println(" ");
		}
		else {
			console.getTextWindow().setCursorPosition((25*(selectX+1))-3,2*selectY+7);
			System.out.print(" ");
		}
	}


	//method for visual cursor movement
	void drawCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(131,4);
			System.out.print(">");
			console.getTextWindow().setCursorPosition(140,4);
			System.out.print("<");
		}
		else {
			console.getTextWindow().setCursorPosition((25*(selectX+1))-3,2*selectY+7);
			System.out.print("<");
		}
	}


	//box setup
	void box() {
		// The game contains 50 cards
		for (int i = 0; i < 50; i++) {
			// The cards: 1 2 3 4 5 6 7 8 9 10
			int tempNumber = randomNumber(1, 10);
			// Must have 5 of a card type
			if (box.counter(tempNumber) < 5) {
				box.add(tempNumber);
			}
			//if more than 5
			else {
				i--;
			}
		}
	}

	// initial game display
	void initialDisplay() {

		setBackgroundColor(0.21, 0.1, 0.16);

		for (int i = 0; i < 49; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
		console.getTextWindow().setCursorPosition(5, 0);System.out.println("   _____ __ \r");
		console.getTextWindow().setCursorPosition(5, 1);System.out.println("  / ____/_ |\r");
		console.getTextWindow().setCursorPosition(5, 2);System.out.println(" | |     | |\r");
		console.getTextWindow().setCursorPosition(5, 3);System.out.println(" | |     | |\r");
		console.getTextWindow().setCursorPosition(5, 4);System.out.println(" | |____ | |\r");
		console.getTextWindow().setCursorPosition(5, 5);System.out.println("  \\_____||_|");
		
		console.getTextWindow().setCursorPosition(30, 0);System.out.println("   _____ ___  \r");
		console.getTextWindow().setCursorPosition(30, 1);System.out.println("  / ____|__ \\ \r");
		console.getTextWindow().setCursorPosition(30, 2);System.out.println(" | |       ) |\r");
		console.getTextWindow().setCursorPosition(30, 3);System.out.println(" | |      / / \r");
		console.getTextWindow().setCursorPosition(30, 4);System.out.println(" | |____ / /_ \r");
		console.getTextWindow().setCursorPosition(30, 5);System.out.println("  \\_____|____|\r");
		
		console.getTextWindow().setCursorPosition(55, 0);System.out.println("   _____ ____  \r");
		console.getTextWindow().setCursorPosition(55, 1);System.out.println("  / ____|___ \\ \r");
		console.getTextWindow().setCursorPosition(55, 2);System.out.println(" | |      __) |\r");
		console.getTextWindow().setCursorPosition(55, 3);System.out.println(" | |     |__ < \r");
		console.getTextWindow().setCursorPosition(55, 4);System.out.println(" | |____ ___) |\r");
		console.getTextWindow().setCursorPosition(55, 5);System.out.println("  \\_____|____/ ");
		
		console.getTextWindow().setCursorPosition(80, 0);System.out.println("   _____ _  _   \r");
		console.getTextWindow().setCursorPosition(80, 1);System.out.println("  / ____| || |  \r");
		console.getTextWindow().setCursorPosition(80, 2);System.out.println(" | |    | || |_ \r");
		console.getTextWindow().setCursorPosition(80, 3);System.out.println(" | |    |__   _|\r");
		console.getTextWindow().setCursorPosition(80, 4);System.out.println(" | |____   | |  \r");
		console.getTextWindow().setCursorPosition(80, 5);System.out.println("  \\_____|  |_|  \r");
		
		console.getTextWindow().setCursorPosition(105, 0);System.out.println("   _____ _____ \r");
		console.getTextWindow().setCursorPosition(105, 1);System.out.println("  / ____| ____|\r");
		console.getTextWindow().setCursorPosition(105, 2);System.out.println(" | |    | |__  \r");
		console.getTextWindow().setCursorPosition(105, 3);System.out.println(" | |    |___ \\ \r");
		console.getTextWindow().setCursorPosition(105, 4);System.out.println(" | |____ ___) |\r");
		console.getTextWindow().setCursorPosition(105, 5);System.out.println("  \\_____|____/ ");


		columns.display();


		console.getTextWindow().setCursorPosition(132, 2);
		System.out.println(".------.\r");
		console.getTextWindow().setCursorPosition(132, 3);
		System.out.println("| .--. |\r");
		console.getTextWindow().setCursorPosition(132, 4);
		System.out.println("| :/\\: |\r");
		console.getTextWindow().setCursorPosition(132, 5);
		System.out.println("| '--' |\r");
		console.getTextWindow().setCursorPosition(132, 6);
		System.out.println("`------'\r");

		// initial score display
		if (language.equalsIgnoreCase(languages[1])) {
			console.getTextWindow().setCursorPosition(125, 10);
			System.out.println("Transferir : " + transferCounter);
			console.getTextWindow().setCursorPosition(125, 11);
			System.out.println("Conjuntos terminados : " + finishedOrderSets);
			console.getTextWindow().setCursorPosition(125, 12);
			System.out.println("Puntaje : " + playerScore);
			console.getTextWindow().setCursorPosition(120,0);
			System.out.println("presiona ESC para DARTE POR VENCIDO");
		}
		else if (language.equalsIgnoreCase(languages[0])) {
			console.getTextWindow().setCursorPosition(130, 10);
			System.out.println("Transfer : " + transferCounter);
			console.getTextWindow().setCursorPosition(130, 11);
			System.out.println("Finished Sets : " + finishedOrderSets);
			console.getTextWindow().setCursorPosition(130, 12);
			System.out.println("Score : " + playerScore);
			console.getTextWindow().setCursorPosition(125, 0);
			System.out.println("press ESC to GIVE UP");
		}
	}

	// initial distribution
	void initialDistribution() {

		/// to create columns
		columns.addColumn("C1");
		columns.addColumn("C2");
		columns.addColumn("C3");
		columns.addColumn("C4");
		columns.addColumn("C5");


		for (int j = 0; j < 6; j++) {
			// initial distribution
			columns.addCard("C1", (int) box.popTheHead());
			columns.addCard("C2", (int) box.popTheHead());
			columns.addCard("C3", (int) box.popTheHead());
			columns.addCard("C4", (int) box.popTheHead());
			columns.addCard("C5", (int) box.popTheHead());
		}

	}



	void readHighScoreTable(){ // read the high score table .txt file
		highScoreTable = new DoubleLinkedList(); // initialize the high score table dll
		try {
			File file = new File("HighScoreTable.txt"); // create a new file object
			Scanner reader = new Scanner(file); // create a new scanner object
			while (reader.hasNextLine()) { // while there is an element in the .txt file
				Object data = reader.nextLine(); // keep the current object
				highScoreTable.add(data); // add the object
			}
			reader.close();
		} catch (FileNotFoundException e) { // error handling
			System.out.println(e);
		}
	}


	//sets color of text
	// each value is a float (0.0 to 1.0) representing R G B values.
	public static void setForegroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color foregroundColor = new Color(red, green, blue);
		Color backgroundColor = console.getTextAttributes().getBackground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}


	// sets color of background
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setBackgroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color backgroundColor = new Color(red, green, blue);
		Color foregroundColor = console.getTextAttributes().getForeground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}
}
