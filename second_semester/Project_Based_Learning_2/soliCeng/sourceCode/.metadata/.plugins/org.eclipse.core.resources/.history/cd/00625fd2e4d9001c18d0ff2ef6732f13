package columns;

import enigma.console.Console;
import enigma.console.TextAttributes;
import enigma.core.Enigma;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Locale;
import java.util.Scanner;

public class Columns {
	
	static Console console = Enigma.getConsole("Columns",106,25,25);

	DoubleLinkedList highScoreTable;
	
	MultiLinkedList columns = new MultiLinkedList();

	SingleLinkedList box = new SingleLinkedList();
	static int boxNumber=0;
	int selectY = 0;
	int selectX = 0;
	static boolean filled=false;
	// ------ Standard variables for keyboard ------
	public KeyListener klis;
	public boolean keypr; // key pressed?
	public int rkey; // key (for press/release)
	
	Columns(){
		
		klis = new KeyListener() {
			public void keyTyped(KeyEvent e) {
			}

			public void keyPressed(KeyEvent e) {
				if (!keypr) {
					keypr = true;
					rkey = e.getKeyCode();
				}
			}

			public void keyReleased(KeyEvent e) {
			}
		};
		console.getTextWindow().addKeyListener(klis);

		columnsGamePlay();

	}
	void clearGameArea() {
		
	}
	void columnsGamePlay() {
		//setup
		box();
		console.getTextWindow().setCursorPosition(0, 23);
		box.display();
		console.getTextWindow().setCursorPosition(0, 0);
		initialDistribution();
		initialDisplay();
		readHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 12);
		printHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 0);
		//game play
		
		while (true) {
			selectionMode();
			executionMode();
		}
	}
	
	// random number generator
	int randomNumber(int min, int max) {
	    int random_int = (int)Math.floor(Math.random()*(max-min+1)+min);  
		return random_int;
	}
	void selectionMode() {
		drawCursor();
		boolean loop = true;
		while (loop) {
			if (keypr) {
				switch(rkey) {
					case (KeyEvent.VK_ENTER): {
						loop = false;
						break;
					}
					case (KeyEvent.VK_UP): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == 0) selectY = columns.columnSize(selectX) - 1;
							else selectY--;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_DOWN): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == columns.columnSize(selectX) - 1) selectY = 0;
							else selectY++;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_LEFT): {
						if (selectX != 0) {
							int tempX = selectX;
							while (tempX != 0) {
								if (columns.columnSize(tempX - 1) == 0) {
									tempX--;
								}
								else {
									clearCursor();
									selectX = tempX - 1;
									if (selectY + 1 > columns.columnSize(selectX)) {
										selectY = columns.columnSize(selectX) - 1;
									}
									drawCursor();
									break;
								}
							}
						}
						break;
					}
					case (KeyEvent.VK_RIGHT): {
						if (selectX != 5) {
							clearCursor();
							while (true) {
								if (selectX != 4) {
									if (columns.columnSize(selectX + 1) == 0) {
										selectX++;
									}
									else break;
								}
								else break;
							}
							if (selectX != 4) {	
								if (selectY + 1 > columns.columnSize(selectX + 1)) {
									selectY = columns.columnSize(selectX + 1) - 1;
								}
							}
							selectX++;
							drawCursor();
						} 
						break;
					}
					case (KeyEvent.VK_Z):{
						if(selectX<5) {
							columns.clearDisplay();
							CardNumberNode storage =  columns.search2(selectX, selectY);
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												CardNumberNode temp=storage;
												while(temp!=null) {
													columns.addCard(column, temp.getCardNumber());
													temp=temp.getNext();
												}
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
						else if(selectX==5&&boxNumber!=0&&filled) {
							filled=false;
							console.getTextWindow().setCursorPosition(45, 9);
							System.out.print("  ");
							columns.clearDisplay();
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												columns.addCard(column, boxNumber);
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										if(selectX!=5)
											selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
					}
				}
				keypr = false;
			}
			try { Thread.sleep(50); } catch (InterruptedException e) {}
		}
		
	}
	
	//this method will use variables SelectX and SelectY.
	void executionMode() {
		if (selectX == 5) {
			boolean allowDraw = true;
			for (int i = 0; i < 5; i++) {
				if (columns.columnSize(i) == 0) 
				{
					allowDraw = false;
					break;
				}
			}
			if (allowDraw) {
				//draw
				filled=true;
				console.getTextWindow().setCursorPosition(45, 9);
				System.out.print("  ");
				console.getTextWindow().setCursorPosition(45, 9);
				boxNumber=(int)box.popTheHead();
				System.out.print(boxNumber);
			}
		}
	}
	
	//method for visual cursor movement
	void clearCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(" ");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print(" ");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(" ");
		}
	}
	
	//method for visual cursor movement
	void drawCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(">");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print("<");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(">");
		}
	}

	//box setup
	void box() {
		// The game contains 50 cards
		for (int i = 0; i < 50; i++) {
			// The cards: 1 2 3 4 5 6 7 8 9 10
			int tempNumber = randomNumber(1, 10);
			// Must have 5 of a card type 
			if (box.counter(tempNumber) < 5) {
				box.add(tempNumber);
			}
			//if more than 5
			else {
				i--;
			}			
		}
	}
	
	
	void initialDisplay() {
		columns.display();
		console.getTextWindow().setCursorPosition(44, 8);	System.out.println("+--+");
		console.getTextWindow().setCursorPosition(44, 9);	System.out.println("|  |");
		console.getTextWindow().setCursorPosition(44, 10);  System.out.println("+--+");
	}
	
	
	void initialDistribution() {
		
		/// to create columns
		columns.addColumn("C1"); 
		columns.addColumn("C2");
		columns.addColumn("C3");
		columns.addColumn("C4");
		columns.addColumn("C5");
		
		
		/* test scenario
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		
		columns.addCard("C2", (int) box.popTheHead());
		columns.addCard("C2", (int) box.popTheHead());
		
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		*/
		
		for (int j = 0; j < 6; j++) {
			// initial distribution
			columns.addCard("C1", (int) box.popTheHead());
			columns.addCard("C2", (int) box.popTheHead());
			columns.addCard("C3", (int) box.popTheHead());
			columns.addCard("C4", (int) box.popTheHead());
			columns.addCard("C5", (int) box.popTheHead());
		}
		
	}

	void printHighScoreTable() { // print the high score table
		highScoreTable.sort();
		highScoreTable.display1();
	}
	
	void readHighScoreTable(){ // read the high score table .txt file
		highScoreTable = new DoubleLinkedList(); // initialize the high score table dll
		try {
			File file = new File("HighScoreTable.txt"); // create a new file object
			Scanner reader = new Scanner(file); // create a new scanner object
			while (reader.hasNextLine()) { // while there is an element in the .txt file
				Object data = reader.nextLine(); // keep the current object
				highScoreTable.add(data); // add the object
			}
			reader.close();
		} catch (FileNotFoundException e) { // error handling
			System.out.println(e);
		}
	}


	//sets color of text
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setForegroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color foregroundColor = new Color(red, green, blue);
		Color backgroundColor = console.getTextAttributes().getBackground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}

	// sets color of background
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setBackgroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color backgroundColor = new Color(red, green, blue);
		Color foregroundColor = console.getTextAttributes().getForeground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}
}
