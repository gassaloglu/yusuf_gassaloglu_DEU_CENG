package searchEngine;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Iterator;

public class searchEngine {
	searchEngine() {
		searchEngineTest();
	}
	HashedDictionary<String, HashedDictionary<Integer, AList>> 
	allWords = new HashedDictionary<String, HashedDictionary<Integer, AList>>();
	
	HashedDictionary<Integer, AList> txtFilesWordCountAndHashValue = new HashedDictionary<Integer, AList>();
	
	AList<String> stopWords = new AList<String>();
	int wordCounter = 0,
		howManyBookWillRead = 100;
	
	String hashingFunction = "paf",
		   collisionHandling = "dh";
	
	void searchEngineTest() {
		long start = System.currentTimeMillis();
		readStopWords("txtFiles\\stop_words_en.txt");
		readAllTxtFilesInTheFolder("txtFiles\\sport");
		test();
		long finish = System.currentTimeMillis();
		System.out.println("Time elapsed: " + (finish - start) + " ms");
		
	}
	
	void test() {
		System.out.println(howManyBookWillRead +" BOOKS");
		System.out.println(hashingFunction+ " && " +collisionHandling);
		System.out.println("Max Load Factor: " + allWords.getMaxLoadFactor());
		System.out.println("Total Entries: " + allWords.getSize());
		System.out.println("Table Size: " + allWords.getHashTableSize());
		System.out.println("Words: " + wordCounter);
		System.out.print("Insert Collisions: ");
		allWords.getInsertCollisionCount();
		//displayWords(allWords);
	}
	
	private void readAllTxtFilesInTheFolder(String path) {
		File folder = new File(path);
		File[] listOfFiles = folder.listFiles();
		int counter = 0;
		for (File file : listOfFiles) {
		    if (file.isFile()) {
		    	counter++;
		        readTxtFile("txtFiles\\sport\\" + file.getName());
		    }
		    if (counter == howManyBookWillRead) {
				break;
			}
		}	
	}
	
	@SuppressWarnings("resource")
	void readTxtFile(String fileName) {
		try {
			File file = new File(fileName);
	        // Creating an object of BufferedReader class
	        BufferedReader br = new BufferedReader(new FileReader(file));
	        // Declaring a string variable
	        String text;
	        while ((text = br.readLine()) != null) {
	        	text = text.replaceAll("\\d", ""); // removing numbers
	        	String[] words = text.split("\\W+"); // removing delimiters
	            //System.out.println(text);   ////////////
	            for (int i = 0; i < words.length; i++) {
	            	boolean notStopWord = true;
	            	for (int j = 1; j < stopWords.getLength(); j++) {
						if (words[i].equalsIgnoreCase(stopWords.getEntry(j))) {
							notStopWord = false;
						}
					}
	            	if (notStopWord && words[i].length() > 0) {	            		
						allWords.add(words[i], txtFilesWordCountAndHashValue, hashingFunction, collisionHandling);
						wordCounter++;
					}
				}
	        }
	        
		} catch (Exception e) {
			System.out.println("ERROR"); //TODO change the error message
		}
        
	}
	@SuppressWarnings("resource")
	void readStopWords(String fileName) {
		 try {
				File file = new File(fileName);
		        // Creating an object of BufferedReader class
		        BufferedReader br = new BufferedReader(new FileReader(file));
		        // Declaring a string variable
		        String text;
		        while ((text = br.readLine()) != null) {
		        	if (text.length() > 0) {
			        	text = text.replaceAll("\\W", ""); // removing delimiters
		        		stopWords.add(text);	
					}
		        }

			} catch (Exception e) {
				System.out.println(e); //TODO change the error message
			}
	        
	 }
	 
	public static void displayWords(HashedDictionary<String, HashedDictionary<String, Integer>> dataBase) {
			Iterator<String> keyIterator = dataBase.getKeyIterator();
			Iterator<HashedDictionary<String, Integer>> valueIterator = dataBase.getValueIterator();
			while (keyIterator.hasNext()) {
				System.out.println("Key: " + keyIterator.next() + " Value: " + valueIterator.next());
			}
		}

}
