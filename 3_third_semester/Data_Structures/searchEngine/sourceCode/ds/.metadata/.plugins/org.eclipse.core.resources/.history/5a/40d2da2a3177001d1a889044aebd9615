package searchEngine;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import java.util.Locale;
import java.util.Scanner;

public class searchEngine {
	searchEngine() {
		searchEngineTest();
	}
	
	/** @NecessaryVariables **/
	
	HashedDictionary<String, AList<String>> 
	// Putting all words into allWords
	allWords = new HashedDictionary<String, AList<String>>();
	AList<String> stopWords = new AList<String>();
	long minSearchtime = Long.MAX_VALUE,
		 maxSearchtime = Long.MIN_VALUE,
		 totalSearchTime = 0;
	long indexingTime = 0,
	     searchCounter = 0;
	String minSearchtimeWord = "",
		   maxSearchtimeWord = "";
	
	/** @inputSection **/
	
	int howManyBookWillRead = 100;
	double maxLoadFactor = 0.8;
	String hashingFunction = "paf",
		   collisionHandling = "dh";
	String inputQuery = "";
	
	/** @testFunction 
	 * All tests are in that function**/
	void searchEngineTest() {
		@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter a string query (3 Words): ");
		inputQuery = sc.nextLine();
		
		System.out.println("\n--- Performance Test ---");
		allWords.setMaxLoadFactor(maxLoadFactor);
		readStopWords("txtFiles\\stop_words_en.txt");
		readAllTxtFilesInTheFolder("txtFiles\\sport");
		performanceMonitoring();
		
		System.out.println("\n--- Relevance Test ---");
		System.out.println("- Query: " + inputQuery);
		findMostRelevantFile(inputQuery);
		
		System.out.println("\n--- Extra Tests---");
		
		System.out.println("- 'Indoor' hash value: " + 
		allWords.getValue("indoor", hashingFunction, collisionHandling, false).getEntry(1));
		System.out.println("- 'World' hash value: " + 
		allWords.getValue("world", hashingFunction, collisionHandling, false).getEntry(1));
		System.out.println("- 'British' hash value: " + 
		allWords.getValue("british", hashingFunction, collisionHandling, false).getEntry(1));
		
	}
	/** @testingPerformanceOfCode **/
	void performanceMonitoring() {
		BufferedReader br = readFile("txtFiles\\search.txt");
        String text;
        try {
			while ((text = br.readLine()) != null) {
				search(text);
				}
		} catch (Exception e) {
			System.out.println("ERROR: " + e);
			System.out.println("Search file is not found.");
			System.out.println("-------------------------");
		}
  		System.out.println("- " +howManyBookWillRead +" BOOKS");
  		System.out.println("- " + hashingFunction.toUpperCase()+ " && " +collisionHandling.toUpperCase());
  		System.out.println("- Max load factor: " + allWords.getMaxLoadFactor());
  		System.out.println("- Total entries in the table: " + allWords.getSize());
  		System.out.println("- Current table size: " + allWords.getHashTableSize()); 
  		System.out.println("- Indexing time: "+ (double)indexingTime/(double)1000000 + " ms");
  		System.out.print("- Search Collisions: "); allWords.getSearchCollisionCount();
  		System.out.println("- Minimum search time: " + minSearchtime + " ns > " + minSearchtimeWord);
		System.out.println("- Maximum search time: " + maxSearchtime + " ns > " + maxSearchtimeWord);
		if (searchCounter  != 0) 
			System.out.println("- Average search time: " + (double)(totalSearchTime/searchCounter)/(double)1000000 + " ms");
	}
	/** @search searching function.
	 *  @param word The word that will search**/
	private void search(String word) {
		long start = System.nanoTime();
		allWords.getValue(word, hashingFunction, collisionHandling, true);
		long finish = System.nanoTime();
		long timeElapsed = (finish - start);
		totalSearchTime += timeElapsed;
		if (timeElapsed > maxSearchtime) {
			if (allWords.contains(word, hashingFunction, collisionHandling, false)) {
				maxSearchtime = timeElapsed;
				maxSearchtimeWord = word;
			}
		}
		else if (timeElapsed < minSearchtime && timeElapsed != 0) {
			if (allWords.contains(word, hashingFunction, collisionHandling, false)) {
				minSearchtime = timeElapsed;
				minSearchtimeWord = word;
				}
		}
		searchCounter ++;
	}
	/** @findingMostRelevantFile
	 *  @param query A word sequence that user will put
	 *  @solutionStrategy
	 *  (number of word in the files / number of total words in the file)
	 *  then sum all values. Least value is most relevant value. **/
	private void findMostRelevantFile(String query) {
		boolean validEntry = true;
		String[] words = query.split("\\s+");
		if (words.length != 3) {
			System.out.println("Please put exactly 3 words in the query.");
			validEntry = false;
		}
		if (validEntry) {
			double totalWordCounter = 0,
					   wordCounter = 0;
			
			double mostRelevantFileRatio = Double.MIN_VALUE,
				   relevantRatio = 1;
			
			String mostRelevantFile = "not exist.";
			for (String wordFirstCheck : words) {
				boolean isWordExist = true;
				if (!allWords.contains(wordFirstCheck, hashingFunction, collisionHandling, false)) { // if word is exist
					isWordExist = false;
				}
				if (isWordExist) {
					AList<String> txtFilesContainingWord = allWords.getValue(wordFirstCheck, hashingFunction, collisionHandling, false);
					for (int i = 2; i <= txtFilesContainingWord.getLength(); i++) { // walking between files
						for (String wordSecondCheck : words) {
							BufferedReader br = readFile("txtFiles\\sport\\" + txtFilesContainingWord.getEntry(i));
					        String text;
					        try {
								while ((text = br.readLine()) != null) {
									text = text.replaceAll("\\d", ""); // removing numbers
									String[] wordsInTheCurrrentTxtFile = text.split("\\W+"); // removing delimiters
								    for (int j = 0; j < wordsInTheCurrrentTxtFile.length; j++) {
								    	totalWordCounter++; //increase total word count
										if (wordsInTheCurrrentTxtFile[j].equalsIgnoreCase(wordSecondCheck)) {
											wordCounter++; // increase word count
										}
									}
								}
							} catch (Exception e) {
								System.out.println("ERROR: " + e);
							}
					        relevantRatio *= wordCounter/totalWordCounter; // Relevance calculation
					        totalWordCounter = 0;
					        wordCounter = 0;
						}
						if (mostRelevantFileRatio > relevantRatio) { // control if the word is more relevant
							mostRelevantFile = txtFilesContainingWord.getEntry(i);
							mostRelevantFileRatio = relevantRatio;
						}
						totalWordCounter = 0;
				        wordCounter = 0;
				        relevantRatio = 0;
				    }
				} else {
					System.out.println(wordFirstCheck + " is not exist in txt files.");
				}	
			}
			System.out.println("- Most relevant file is " + mostRelevantFile);
		}	
	}
	
	/** @param path files path those will read **/
	private void readAllTxtFilesInTheFolder(String path) {
		File folder = new File(path);
		File[] listOfFiles = folder.listFiles();
		int counter = 0;
		for (File file : listOfFiles) {
		    if (file.isFile()) {
		    	counter++;
		        readTxtFile("txtFiles\\sport\\" + file.getName());
		    }
		    if (counter == howManyBookWillRead) { // read files asked times
				break;
			}
		}	
	}
	
	// File reading function
	BufferedReader readFile(String fileName) {
		File file = new File(fileName);
        BufferedReader br;
		try {
			br = new BufferedReader(new FileReader(file));
			return br;
		} catch (FileNotFoundException e) {
			System.out.println("ERROR: " + e);
			return null;
		}
	}
	
	/** @readTxtFile Read txt file and put words into the hash table
	 *  @param fileName File name **/
	void readTxtFile(String fileName) {
		try {
			BufferedReader br = readFile(fileName);
	        String text;
	        while ((text = br.readLine()) != null) {
	        	text = text.replaceAll("\\d", ""); // removing numbers
	        	String[] words = text.split("\\W+"); // removing delimiters
	            for (int i = 0; i < words.length; i++) {
	            	boolean notStopWord = true;
	            	// Removing stop word
	            	for (int j = 1; j < stopWords.getLength(); j++) {
						if (words[i].equalsIgnoreCase(stopWords.getEntry(j))) {
							notStopWord = false;
						}
					}
	            	try {
	            		// if the word is not in hash table
	            		if (notStopWord && words[i].length() > 0 && !allWords.contains(words[i].toLowerCase(Locale.ENGLISH), hashingFunction, collisionHandling, false)) {
		            		AList<String> 
		            		txtFilesWordCountAndHashValue = new AList<String>(); // the words (key) value
		            		txtFilesWordCountAndHashValue.add(Integer.toString(allWords.getHashValue(words[i], hashingFunction)));
		            		txtFilesWordCountAndHashValue.add(fileName.substring(15)); // adding txt file to the words value
		            		long indexingStart = System.nanoTime();
		            		allWords.add(words[i].toLowerCase(Locale.ENGLISH), txtFilesWordCountAndHashValue, hashingFunction, collisionHandling);// adding word into the table
		            		long indexingFinish = System.nanoTime();
		            		indexingTime += (indexingFinish - indexingStart);
						}
	            		// if word is in hash table
		            	else if (notStopWord && words[i].length() > 0 && allWords.contains(words[i].toLowerCase(Locale.ENGLISH), hashingFunction, collisionHandling ,false)) {
		            		if (!allWords.getValue(words[i], hashingFunction, collisionHandling, false).contains(fileName.substring(15))) {
			            		allWords.getValue(words[i], hashingFunction, collisionHandling, false).add(fileName.substring(15));// add file to existing words value array list
							}
						}
					} catch (Exception e) {
						// PASS . This handling for the words existing in the same file more than one.
					}
				}
	        }
		} catch (Exception e) {
			System.out.println("ERROR: " + e);
		}
	}
	
	@SuppressWarnings("resource")
	// Reading stop words
	void readStopWords(String fileName) {
		 try {
				File file = new File(fileName);
		        BufferedReader br = new BufferedReader(new FileReader(file));
		        String text;
		        while ((text = br.readLine()) != null) {
		        	if (text.length() > 0) { // if it is blank space
			        	text = text.replaceAll("\\W", ""); // removing delimiters
		    		stopWords.add(text);	
				}
		    }
		} catch (Exception e) {
			System.out.println("ERROR: " + e);
		}   
	 }
	 
	/** @param dataBase Hash Dictionary that will be displayed. **/
	public static void displayWords(HashedDictionary<String, AList<String>> dataBase) {
			Iterator<String> keyIterator = dataBase.getKeyIterator();
			Iterator<AList<String>> valueIterator = dataBase.getValueIterator();
			while (keyIterator.hasNext()) {
				System.out.println("Key: " + keyIterator.next() + " Value: " + valueIterator.next());
			}
		}
}
