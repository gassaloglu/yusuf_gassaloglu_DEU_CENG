!SESSION 2022-05-23 13:07:47.160 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\yusuf\OneDrive\Masaüstü\pbl3\.metadata\.bak_0.log
Created Time: 2022-05-23 14:26:35.277

!ENTRY org.eclipse.jdt.core 4 4 2022-05-23 14:26:35.278
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package columns;

import enigma.console.Console;
import enigma.console.TextAttributes;
import enigma.core.Enigma;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Columns {
	
	static Console console = Enigma.getConsole("Columns",155,38,20);

	DoubleLinkedList highScoreTable;
	
	MultiLinkedList columns = new MultiLinkedList();

	SingleLinkedList box = new SingleLinkedList();
	static int boxNumber=0;
	int selectY = 0;
	int selectX = 0;
	static boolean filled=false;
	// ------ Standard variables for keyboard ------
	public KeyListener klis;
	public boolean keypr; // key pressed?
	public int rkey; // key (for press/release)
	
	Columns(){
		
		klis = new KeyListener() {
			public void keyTyped(KeyEvent e) {
			}

			public void keyPressed(KeyEvent e) {
				if (!keypr) {
					keypr = true;
					rkey = e.getKeyCode();
				}
			}

			public void keyReleased(KeyEvent e) {
			}
		};
		console.getTextWindow().addKeyListener(klis);

		menu();

	}
	
	void menu() {
		console.getTextWindow().setCursorPosition(0, 0);
		int chosen= 1;
		setBackgroundColor(0.03, 0.49, 0.53);
		for (int i = 0; i < 37; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
		while (true) {			
			printMenu(chosen);			
			 if (keypr == true) {
				//to play related sound
				keypr = false;
				 switch (rkey) {
				case KeyEvent.VK_UP:
					if (chosen == 1 )
						chosen =4;
					else
						chosen--;
					break;
				case KeyEvent.VK_DOWN:
					if (chosen == 4 )
						chosen =1;
					else
						chosen++;
					break;
				case KeyEvent.VK_ENTER:
					switch (chosen) {
					case 1:
						consoleClear();
						columnsGamePlay();
						break;
					case 2:
						System.out.println("2");
						break;
					case 3:
						System.out.println("3");
						break;
					case 4:
						System.exit(0);
						break;		
					}
					break;
				}
			}		 			 			 
		}
	}
	
	void consoleClear() {
		console.getTextWindow().setCursorPosition(0, 0);
		for (int i = 0; i < 37; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
	}

	void printMenu(int index) {
		
		setBackgroundColor(0.21, 0.1, 0.16);

		
		setForegroundColor(0.03, 0.49, 0.53);
		  console.getTextWindow().setCursorPosition(0, 8);System.out.println("                                   ");
		 console.getTextWindow().setCursorPosition(0, 9);System.out.println("       .------.\r    .------.\r        ");												   
		 console.getTextWindow().setCursorPosition(0, 10);System.out.println("       |7.--. |\r    |9.--. |\r        ");
		console.getTextWindow().setCursorPosition(0, 11);System.out.println("       | :/\\: |\r    | :/\\: |\r        ");
		console.getTextWindow().setCursorPosition(0, 12);System.out.println("       | (__) |\r    | (__) |\r        ");
		console.getTextWindow().setCursorPosition(0, 13);System.out.println("       | '--'7|\r    | '--'9|\r        ");
		console.getTextWindow().setCursorPosition(0, 14);System.out.println("       `------'    `------'        ");
		console.getTextWindow().setCursorPosition(0, 15);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(0, 16);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(35, 8);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 9);System.out.println("  ______      ___      _____      _____     ______   ________   ____  _____     ______      \r");
		console.getTextWindow().setCursorPosition(35, 10);System.out.println(".' ____ \\   .'   `.   |_   _|    |_   _|  .' ___  | |_   __  | |_   \\|_   _|  .' ___  |     \r");
		console.getTextWindow().setCursorPosition(35, 11);System.out.println("| (___ \\_| /  .-.  \\    | |        | |   / .'   \\_|   | |_ \\_|   |   \\ | |   / .'   \\_|     \r");
		console.getTextWindow().setCursorPosition(35, 12);System.out.println(" _.____`.  | |   | |    | |   _    | |   | |          |  _| _    | |\\ \\| |   | |   ____     \r");
		console.getTextWindow().setCursorPosition(35, 13);System.out.println("| \\____) | \\  `-'  /   _| |__/ |  _| |_  \\ `.___.'\\  _| |__/ |  _| |_\\   |_  \\ `.___]       \r");
		console.getTextWindow().setCursorPosition(35, 14);System.out.println(" \\______.'  `.___.'   |________| |_____|  `.____ .' |________| |_____|\\____|  `._____.'     \r");
		console.getTextWindow().setCursorPosition(35, 15);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 16);System.out.println("                                                                                                                       ");
		 console.getTextWindow().setCursorPosition(125, 9);System.out.println("  .------.\r    .------.\r       ");												   
		 console.getTextWindow().setCursorPosition(125, 10);System.out.println("  |7.--. |\r    |9.--. |\r       ");
		console.getTextWindow().setCursorPosition(125, 11);System.out.println("  | :/\\: |\r    | :/\\: |\r       ");
		console.getTextWindow().setCursorPosition(125, 12);System.out.println("  |  \\/  |\r    |  \\/  |\r       ");
		console.getTextWindow().setCursorPosition(125, 13);System.out.println("  | '--'7|\r    | '--'9|\r       ");
		console.getTextWindow().setCursorPosition(125, 14);System.out.println("  `------'    `------'       ");
		
		setBackgroundColor(0.03, 0.49, 0.53);

		if (index == 1)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(45, 19);
		System.out.println(" ____ ____ ____ ____ \r");
		System.out.println("||p |||l |||a |||y ||\r");
		System.out.println();		+ "||__|||__|||__|||__||\r\n"
				+ "|/__\\|/__\\|/__\\|/__\\|");
		
		if (index == 2)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(65, 23);
		System.out.println("    OPTIONS  ");
		
		if (index == 3)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(85, 27);
		System.out.println("   CREDITS   ");
		
		
		if (index == 4) 
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(105, 31);
		System.out.println("     EXIT    ");
		setForegroundColor(0.91, 0.76, 0.83);
	}
	
	void columnsGamePlay() {
		//setup
		box();
		console.getTextWindow().setCursorPosition(0, 23);
		box.display();
		console.getTextWindow().setCursorPosition(0, 0);
		initialDistribution();
		initialDisplay();
		readHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 12);
		printHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 0);
		//game play
		
		while (true) {
			selectionMode();
			executionMode();
		}
	}
	
	// random number generator
	int randomNumber(int min, int max) {
	    int random_int = (int)Math.floor(Math.random()*(max-min+1)+min);  
		return random_int;
	}
	void selectionMode() {
		drawCursor();
		boolean loop = true;
		while (loop) {
			if (keypr) {
				switch(rkey) {
					case (KeyEvent.VK_ENTER): {
						if (selectX == 5) {
							boolean allowDraw = true;
							for (int i = 0; i < 5; i++) {
								if (columns.columnSize(i) == 0) 
								{
									allowDraw = false;
									break;
								}
							}
							if (allowDraw) {
								//draw
								filled=true;
								console.getTextWindow().setCursorPosition(45, 9);
								System.out.print("  ");
								console.getTextWindow().setCursorPosition(45, 9);
								boxNumber=(int)box.popTheHead();
								System.out.print(boxNumber);
							}
						}
						break;
					}
					case (KeyEvent.VK_UP): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == 0) selectY = columns.columnSize(selectX) - 1;
							else selectY--;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_DOWN): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == columns.columnSize(selectX) - 1) selectY = 0;
							else selectY++;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_LEFT): {
						if (selectX != 0) {
							int tempX = selectX;
							while (tempX != 0) {
								if (columns.columnSize(tempX - 1) == 0) {
									tempX--;
								}
								else {
									clearCursor();
									selectX = tempX - 1;
									if (selectY + 1 > columns.columnSize(selectX)) {
										selectY = columns.columnSize(selectX) - 1;
									}
									drawCursor();
									break;
								}
							}
						}
						break;
					}
					case (KeyEvent.VK_RIGHT): {
						if (selectX != 5) {
							clearCursor();
							while (true) {
								if (selectX != 4) {
									if (columns.columnSize(selectX + 1) == 0) {
										selectX++;
									}
									else break;
								}
								else break;
							}
							if (selectX != 4) {	
								if (selectY + 1 > columns.columnSize(selectX + 1)) {
									selectY = columns.columnSize(selectX + 1) - 1;
								}
							}
							selectX++;
							drawCursor();
						} 
						break;
					}
					case (KeyEvent.VK_Z):{
						if(selectX<5) {
							columns.clearDisplay();
							CardNumberNode storage =  columns.search2(selectX, selectY);
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												CardNumberNode temp=storage;
												while(temp!=null) {
													columns.addCard(column, temp.getCardNumber());
													temp=temp.getNext();
												}
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
						else if(selectX==5&&boxNumber!=0&&filled) {
							filled=false;
							console.getTextWindow().setCursorPosition(45, 9);
							System.out.print("  ");
							columns.clearDisplay();
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												columns.addCard(column, boxNumber);
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										if(selectX!=5)
											selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
					}
				}
				keypr = false;
			}
			try { Thread.sleep(50); } catch (InterruptedException e) {}
		}
		
	}
	
	//this method will use variables SelectX and SelectY.
	void executionMode() {
		
	}
	
	//method for visual cursor movement
	void clearCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(" ");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print(" ");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(" ");
		}
	}
	
	//method for visual cursor movement
	void drawCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(">");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print("<");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(">");
		}
	}

	//box setup
	void box() {
		// The game contains 50 cards
		for (int i = 0; i < 50; i++) {
			// The cards: 1 2 3 4 5 6 7 8 9 10
			int tempNumber = randomNumber(1, 10);
			// Must have 5 of a card type 
			if (box.counter(tempNumber) < 5) {
				box.add(tempNumber);
			}
			//if more than 5
			else {
				i--;
			}			
		}
	}
	
	
	void initialDisplay() {
		columns.display();
		console.getTextWindow().setCursorPosition(44, 8);	System.out.println("+--+");
		console.getTextWindow().setCursorPosition(44, 9);	System.out.println("|  |");
		console.getTextWindow().setCursorPosition(44, 10);  System.out.println("+--+");
	}
	
	
	void initialDistribution() {
		
		/// to create columns
		columns.addColumn("C1"); 
		columns.addColumn("C2");
		columns.addColumn("C3");
		columns.addColumn("C4");
		columns.addColumn("C5");
		
		
		/* test scenario
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		
		columns.addCard("C2", (int) box.popTheHead());
		columns.addCard("C2", (int) box.popTheHead());
		
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		*/
		
		for (int j = 0; j < 6; j++) {
			// initial distribution
			columns.addCard("C1", (int) box.popTheHead());
			columns.addCard("C2", (int) box.popTheHead());
			columns.addCard("C3", (int) box.popTheHead());
			columns.addCard("C4", (int) box.popTheHead());
			columns.addCard("C5", (int) box.popTheHead());
		}
		
	}

	void printHighScoreTable() { // print the high score table
		highScoreTable.sort();
		highScoreTable.display1();
	}
	
	void readHighScoreTable(){ // read the high score table .txt file
		highScoreTable = new DoubleLinkedList(); // initialize the high score table dll
		try {
			File file = new File("HighScoreTable.txt"); // create a new file object
			Scanner reader = new Scanner(file); // create a new scanner object
			while (reader.hasNextLine()) { // while there is an element in the .txt file
				Object data = reader.nextLine(); // keep the current object
				highScoreTable.add(data); // add the object
			}
			reader.close();
		} catch (FileNotFoundException e) { // error handling
			System.out.println(e);
		}
	}


	//sets color of text
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setForegroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color foregroundColor = new Color(red, green, blue);
		Color backgroundColor = console.getTextAttributes().getBackground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}

	// sets color of background
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setBackgroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color backgroundColor = new Color(red, green, blue);
		Color foregroundColor = console.getTextAttributes().getForeground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-23 14:26:35.280
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-23 14:26:35.281
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-23 14:26:36.275
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package columns;

import enigma.console.Console;
import enigma.console.TextAttributes;
import enigma.core.Enigma;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Columns {
	
	static Console console = Enigma.getConsole("Columns",155,38,20);

	DoubleLinkedList highScoreTable;
	
	MultiLinkedList columns = new MultiLinkedList();

	SingleLinkedList box = new SingleLinkedList();
	static int boxNumber=0;
	int selectY = 0;
	int selectX = 0;
	static boolean filled=false;
	// ------ Standard variables for keyboard ------
	public KeyListener klis;
	public boolean keypr; // key pressed?
	public int rkey; // key (for press/release)
	
	Columns(){
		
		klis = new KeyListener() {
			public void keyTyped(KeyEvent e) {
			}

			public void keyPressed(KeyEvent e) {
				if (!keypr) {
					keypr = true;
					rkey = e.getKeyCode();
				}
			}

			public void keyReleased(KeyEvent e) {
			}
		};
		console.getTextWindow().addKeyListener(klis);

		menu();

	}
	
	void menu() {
		console.getTextWindow().setCursorPosition(0, 0);
		int chosen= 1;
		setBackgroundColor(0.03, 0.49, 0.53);
		for (int i = 0; i < 37; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
		while (true) {			
			printMenu(chosen);			
			 if (keypr == true) {
				//to play related sound
				keypr = false;
				 switch (rkey) {
				case KeyEvent.VK_UP:
					if (chosen == 1 )
						chosen =4;
					else
						chosen--;
					break;
				case KeyEvent.VK_DOWN:
					if (chosen == 4 )
						chosen =1;
					else
						chosen++;
					break;
				case KeyEvent.VK_ENTER:
					switch (chosen) {
					case 1:
						consoleClear();
						columnsGamePlay();
						break;
					case 2:
						System.out.println("2");
						break;
					case 3:
						System.out.println("3");
						break;
					case 4:
						System.exit(0);
						break;		
					}
					break;
				}
			}		 			 			 
		}
	}
	
	void consoleClear() {
		console.getTextWindow().setCursorPosition(0, 0);
		for (int i = 0; i < 37; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
	}

	void printMenu(int index) {
		
		setBackgroundColor(0.21, 0.1, 0.16);

		
		setForegroundColor(0.03, 0.49, 0.53);
		  console.getTextWindow().setCursorPosition(0, 8);System.out.println("                                   ");
		 console.getTextWindow().setCursorPosition(0, 9);System.out.println("       .------.\r    .------.\r        ");												   
		 console.getTextWindow().setCursorPosition(0, 10);System.out.println("       |7.--. |\r    |9.--. |\r        ");
		console.getTextWindow().setCursorPosition(0, 11);System.out.println("       | :/\\: |\r    | :/\\: |\r        ");
		console.getTextWindow().setCursorPosition(0, 12);System.out.println("       | (__) |\r    | (__) |\r        ");
		console.getTextWindow().setCursorPosition(0, 13);System.out.println("       | '--'7|\r    | '--'9|\r        ");
		console.getTextWindow().setCursorPosition(0, 14);System.out.println("       `------'    `------'        ");
		console.getTextWindow().setCursorPosition(0, 15);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(0, 16);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(35, 8);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 9);System.out.println("  ______      ___      _____      _____     ______   ________   ____  _____     ______      \r");
		console.getTextWindow().setCursorPosition(35, 10);System.out.println(".' ____ \\   .'   `.   |_   _|    |_   _|  .' ___  | |_   __  | |_   \\|_   _|  .' ___  |     \r");
		console.getTextWindow().setCursorPosition(35, 11);System.out.println("| (___ \\_| /  .-.  \\    | |        | |   / .'   \\_|   | |_ \\_|   |   \\ | |   / .'   \\_|     \r");
		console.getTextWindow().setCursorPosition(35, 12);System.out.println(" _.____`.  | |   | |    | |   _    | |   | |          |  _| _    | |\\ \\| |   | |   ____     \r");
		console.getTextWindow().setCursorPosition(35, 13);System.out.println("| \\____) | \\  `-'  /   _| |__/ |  _| |_  \\ `.___.'\\  _| |__/ |  _| |_\\   |_  \\ `.___]       \r");
		console.getTextWindow().setCursorPosition(35, 14);System.out.println(" \\______.'  `.___.'   |________| |_____|  `.____ .' |________| |_____|\\____|  `._____.'     \r");
		console.getTextWindow().setCursorPosition(35, 15);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 16);System.out.println("                                                                                                                       ");
		 console.getTextWindow().setCursorPosition(125, 9);System.out.println("  .------.\r    .------.\r       ");												   
		 console.getTextWindow().setCursorPosition(125, 10);System.out.println("  |7.--. |\r    |9.--. |\r       ");
		console.getTextWindow().setCursorPosition(125, 11);System.out.println("  | :/\\: |\r    | :/\\: |\r       ");
		console.getTextWindow().setCursorPosition(125, 12);System.out.println("  |  \\/  |\r    |  \\/  |\r       ");
		console.getTextWindow().setCursorPosition(125, 13);System.out.println("  | '--'7|\r    | '--'9|\r       ");
		console.getTextWindow().setCursorPosition(125, 14);System.out.println("  `------'    `------'       ");
		
		setBackgroundColor(0.03, 0.49, 0.53);

		if (index == 1)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(45, 19);
		System.out.println(" ____ ____ ____ ____ \r");
		System.out.println("||p |||l |||a |||y ||\r");
		System.out.println("");		+ "||__|||__|||__|||__||\r\n"
				+ "|/__\\|/__\\|/__\\|/__\\|");
		
		if (index == 2)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(65, 23);
		System.out.println("    OPTIONS  ");
		
		if (index == 3)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(85, 27);
		System.out.println("   CREDITS   ");
		
		
		if (index == 4) 
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(105, 31);
		System.out.println("     EXIT    ");
		setForegroundColor(0.91, 0.76, 0.83);
	}
	
	void columnsGamePlay() {
		//setup
		box();
		console.getTextWindow().setCursorPosition(0, 23);
		box.display();
		console.getTextWindow().setCursorPosition(0, 0);
		initialDistribution();
		initialDisplay();
		readHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 12);
		printHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 0);
		//game play
		
		while (true) {
			selectionMode();
			executionMode();
		}
	}
	
	// random number generator
	int randomNumber(int min, int max) {
	    int random_int = (int)Math.floor(Math.random()*(max-min+1)+min);  
		return random_int;
	}
	void selectionMode() {
		drawCursor();
		boolean loop = true;
		while (loop) {
			if (keypr) {
				switch(rkey) {
					case (KeyEvent.VK_ENTER): {
						if (selectX == 5) {
							boolean allowDraw = true;
							for (int i = 0; i < 5; i++) {
								if (columns.columnSize(i) == 0) 
								{
									allowDraw = false;
									break;
								}
							}
							if (allowDraw) {
								//draw
								filled=true;
								console.getTextWindow().setCursorPosition(45, 9);
								System.out.print("  ");
								console.getTextWindow().setCursorPosition(45, 9);
								boxNumber=(int)box.popTheHead();
								System.out.print(boxNumber);
							}
						}
						break;
					}
					case (KeyEvent.VK_UP): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == 0) selectY = columns.columnSize(selectX) - 1;
							else selectY--;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_DOWN): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == columns.columnSize(selectX) - 1) selectY = 0;
							else selectY++;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_LEFT): {
						if (selectX != 0) {
							int tempX = selectX;
							while (tempX != 0) {
								if (columns.columnSize(tempX - 1) == 0) {
									tempX--;
								}
								else {
									clearCursor();
									selectX = tempX - 1;
									if (selectY + 1 > columns.columnSize(selectX)) {
										selectY = columns.columnSize(selectX) - 1;
									}
									drawCursor();
									break;
								}
							}
						}
						break;
					}
					case (KeyEvent.VK_RIGHT): {
						if (selectX != 5) {
							clearCursor();
							while (true) {
								if (selectX != 4) {
									if (columns.columnSize(selectX + 1) == 0) {
										selectX++;
									}
									else break;
								}
								else break;
							}
							if (selectX != 4) {	
								if (selectY + 1 > columns.columnSize(selectX + 1)) {
									selectY = columns.columnSize(selectX + 1) - 1;
								}
							}
							selectX++;
							drawCursor();
						} 
						break;
					}
					case (KeyEvent.VK_Z):{
						if(selectX<5) {
							columns.clearDisplay();
							CardNumberNode storage =  columns.search2(selectX, selectY);
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												CardNumberNode temp=storage;
												while(temp!=null) {
													columns.addCard(column, temp.getCardNumber());
													temp=temp.getNext();
												}
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
						else if(selectX==5&&boxNumber!=0&&filled) {
							filled=false;
							console.getTextWindow().setCursorPosition(45, 9);
							System.out.print("  ");
							columns.clearDisplay();
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												columns.addCard(column, boxNumber);
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										if(selectX!=5)
											selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
					}
				}
				keypr = false;
			}
			try { Thread.sleep(50); } catch (InterruptedException e) {}
		}
		
	}
	
	//this method will use variables SelectX and SelectY.
	void executionMode() {
		
	}
	
	//method for visual cursor movement
	void clearCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(" ");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print(" ");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(" ");
		}
	}
	
	//method for visual cursor movement
	void drawCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(">");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print("<");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(">");
		}
	}

	//box setup
	void box() {
		// The game contains 50 cards
		for (int i = 0; i < 50; i++) {
			// The cards: 1 2 3 4 5 6 7 8 9 10
			int tempNumber = randomNumber(1, 10);
			// Must have 5 of a card type 
			if (box.counter(tempNumber) < 5) {
				box.add(tempNumber);
			}
			//if more than 5
			else {
				i--;
			}			
		}
	}
	
	
	void initialDisplay() {
		columns.display();
		console.getTextWindow().setCursorPosition(44, 8);	System.out.println("+--+");
		console.getTextWindow().setCursorPosition(44, 9);	System.out.println("|  |");
		console.getTextWindow().setCursorPosition(44, 10);  System.out.println("+--+");
	}
	
	
	void initialDistribution() {
		
		/// to create columns
		columns.addColumn("C1"); 
		columns.addColumn("C2");
		columns.addColumn("C3");
		columns.addColumn("C4");
		columns.addColumn("C5");
		
		
		/* test scenario
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		
		columns.addCard("C2", (int) box.popTheHead());
		columns.addCard("C2", (int) box.popTheHead());
		
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		*/
		
		for (int j = 0; j < 6; j++) {
			// initial distribution
			columns.addCard("C1", (int) box.popTheHead());
			columns.addCard("C2", (int) box.popTheHead());
			columns.addCard("C3", (int) box.popTheHead());
			columns.addCard("C4", (int) box.popTheHead());
			columns.addCard("C5", (int) box.popTheHead());
		}
		
	}

	void printHighScoreTable() { // print the high score table
		highScoreTable.sort();
		highScoreTable.display1();
	}
	
	void readHighScoreTable(){ // read the high score table .txt file
		highScoreTable = new DoubleLinkedList(); // initialize the high score table dll
		try {
			File file = new File("HighScoreTable.txt"); // create a new file object
			Scanner reader = new Scanner(file); // create a new scanner object
			while (reader.hasNextLine()) { // while there is an element in the .txt file
				Object data = reader.nextLine(); // keep the current object
				highScoreTable.add(data); // add the object
			}
			reader.close();
		} catch (FileNotFoundException e) { // error handling
			System.out.println(e);
		}
	}


	//sets color of text
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setForegroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color foregroundColor = new Color(red, green, blue);
		Color backgroundColor = console.getTextAttributes().getBackground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}

	// sets color of background
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setBackgroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color backgroundColor = new Color(red, green, blue);
		Color foregroundColor = console.getTextAttributes().getForeground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-23 14:26:36.277
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-23 14:26:36.278
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-23 14:26:37.295
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package columns;

import enigma.console.Console;
import enigma.console.TextAttributes;
import enigma.core.Enigma;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Columns {
	
	static Console console = Enigma.getConsole("Columns",155,38,20);

	DoubleLinkedList highScoreTable;
	
	MultiLinkedList columns = new MultiLinkedList();

	SingleLinkedList box = new SingleLinkedList();
	static int boxNumber=0;
	int selectY = 0;
	int selectX = 0;
	static boolean filled=false;
	// ------ Standard variables for keyboard ------
	public KeyListener klis;
	public boolean keypr; // key pressed?
	public int rkey; // key (for press/release)
	
	Columns(){
		
		klis = new KeyListener() {
			public void keyTyped(KeyEvent e) {
			}

			public void keyPressed(KeyEvent e) {
				if (!keypr) {
					keypr = true;
					rkey = e.getKeyCode();
				}
			}

			public void keyReleased(KeyEvent e) {
			}
		};
		console.getTextWindow().addKeyListener(klis);

		menu();

	}
	
	void menu() {
		console.getTextWindow().setCursorPosition(0, 0);
		int chosen= 1;
		setBackgroundColor(0.03, 0.49, 0.53);
		for (int i = 0; i < 37; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
		while (true) {			
			printMenu(chosen);			
			 if (keypr == true) {
				//to play related sound
				keypr = false;
				 switch (rkey) {
				case KeyEvent.VK_UP:
					if (chosen == 1 )
						chosen =4;
					else
						chosen--;
					break;
				case KeyEvent.VK_DOWN:
					if (chosen == 4 )
						chosen =1;
					else
						chosen++;
					break;
				case KeyEvent.VK_ENTER:
					switch (chosen) {
					case 1:
						consoleClear();
						columnsGamePlay();
						break;
					case 2:
						System.out.println("2");
						break;
					case 3:
						System.out.println("3");
						break;
					case 4:
						System.exit(0);
						break;		
					}
					break;
				}
			}		 			 			 
		}
	}
	
	void consoleClear() {
		console.getTextWindow().setCursorPosition(0, 0);
		for (int i = 0; i < 37; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
	}

	void printMenu(int index) {
		
		setBackgroundColor(0.21, 0.1, 0.16);

		
		setForegroundColor(0.03, 0.49, 0.53);
		  console.getTextWindow().setCursorPosition(0, 8);System.out.println("                                   ");
		 console.getTextWindow().setCursorPosition(0, 9);System.out.println("       .------.\r    .------.\r        ");												   
		 console.getTextWindow().setCursorPosition(0, 10);System.out.println("       |7.--. |\r    |9.--. |\r        ");
		console.getTextWindow().setCursorPosition(0, 11);System.out.println("       | :/\\: |\r    | :/\\: |\r        ");
		console.getTextWindow().setCursorPosition(0, 12);System.out.println("       | (__) |\r    | (__) |\r        ");
		console.getTextWindow().setCursorPosition(0, 13);System.out.println("       | '--'7|\r    | '--'9|\r        ");
		console.getTextWindow().setCursorPosition(0, 14);System.out.println("       `------'    `------'        ");
		console.getTextWindow().setCursorPosition(0, 15);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(0, 16);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(35, 8);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 9);System.out.println("  ______      ___      _____      _____     ______   ________   ____  _____     ______      \r");
		console.getTextWindow().setCursorPosition(35, 10);System.out.println(".' ____ \\   .'   `.   |_   _|    |_   _|  .' ___  | |_   __  | |_   \\|_   _|  .' ___  |     \r");
		console.getTextWindow().setCursorPosition(35, 11);System.out.println("| (___ \\_| /  .-.  \\    | |        | |   / .'   \\_|   | |_ \\_|   |   \\ | |   / .'   \\_|     \r");
		console.getTextWindow().setCursorPosition(35, 12);System.out.println(" _.____`.  | |   | |    | |   _    | |   | |          |  _| _    | |\\ \\| |   | |   ____     \r");
		console.getTextWindow().setCursorPosition(35, 13);System.out.println("| \\____) | \\  `-'  /   _| |__/ |  _| |_  \\ `.___.'\\  _| |__/ |  _| |_\\   |_  \\ `.___]       \r");
		console.getTextWindow().setCursorPosition(35, 14);System.out.println(" \\______.'  `.___.'   |________| |_____|  `.____ .' |________| |_____|\\____|  `._____.'     \r");
		console.getTextWindow().setCursorPosition(35, 15);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 16);System.out.println("                                                                                                                       ");
		 console.getTextWindow().setCursorPosition(125, 9);System.out.println("  .------.\r    .------.\r       ");												   
		 console.getTextWindow().setCursorPosition(125, 10);System.out.println("  |7.--. |\r    |9.--. |\r       ");
		console.getTextWindow().setCursorPosition(125, 11);System.out.println("  | :/\\: |\r    | :/\\: |\r       ");
		console.getTextWindow().setCursorPosition(125, 12);System.out.println("  |  \\/  |\r    |  \\/  |\r       ");
		console.getTextWindow().setCursorPosition(125, 13);System.out.println("  | '--'7|\r    | '--'9|\r       ");
		console.getTextWindow().setCursorPosition(125, 14);System.out.println("  `------'    `------'       ");
		
		setBackgroundColor(0.03, 0.49, 0.53);

		if (index == 1)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(45, 19);
		System.out.println(" ____ ____ ____ ____ \r");
		System.out.println("||p |||l |||a |||y ||\r");
		System.out.println("\"||p |||l |||a |||y ||\\r");		+ "||__|||__|||__|||__||\r\n"
				+ "|/__\\|/__\\|/__\\|/__\\|");
		
		if (index == 2)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(65, 23);
		System.out.println("    OPTIONS  ");
		
		if (index == 3)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(85, 27);
		System.out.println("   CREDITS   ");
		
		
		if (index == 4) 
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(105, 31);
		System.out.println("     EXIT    ");
		setForegroundColor(0.91, 0.76, 0.83);
	}
	
	void columnsGamePlay() {
		//setup
		box();
		console.getTextWindow().setCursorPosition(0, 23);
		box.display();
		console.getTextWindow().setCursorPosition(0, 0);
		initialDistribution();
		initialDisplay();
		readHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 12);
		printHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 0);
		//game play
		
		while (true) {
			selectionMode();
			executionMode();
		}
	}
	
	// random number generator
	int randomNumber(int min, int max) {
	    int random_int = (int)Math.floor(Math.random()*(max-min+1)+min);  
		return random_int;
	}
	void selectionMode() {
		drawCursor();
		boolean loop = true;
		while (loop) {
			if (keypr) {
				switch(rkey) {
					case (KeyEvent.VK_ENTER): {
						if (selectX == 5) {
							boolean allowDraw = true;
							for (int i = 0; i < 5; i++) {
								if (columns.columnSize(i) == 0) 
								{
									allowDraw = false;
									break;
								}
							}
							if (allowDraw) {
								//draw
								filled=true;
								console.getTextWindow().setCursorPosition(45, 9);
								System.out.print("  ");
								console.getTextWindow().setCursorPosition(45, 9);
								boxNumber=(int)box.popTheHead();
								System.out.print(boxNumber);
							}
						}
						break;
					}
					case (KeyEvent.VK_UP): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == 0) selectY = columns.columnSize(selectX) - 1;
							else selectY--;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_DOWN): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == columns.columnSize(selectX) - 1) selectY = 0;
							else selectY++;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_LEFT): {
						if (selectX != 0) {
							int tempX = selectX;
							while (tempX != 0) {
								if (columns.columnSize(tempX - 1) == 0) {
									tempX--;
								}
								else {
									clearCursor();
									selectX = tempX - 1;
									if (selectY + 1 > columns.columnSize(selectX)) {
										selectY = columns.columnSize(selectX) - 1;
									}
									drawCursor();
									break;
								}
							}
						}
						break;
					}
					case (KeyEvent.VK_RIGHT): {
						if (selectX != 5) {
							clearCursor();
							while (true) {
								if (selectX != 4) {
									if (columns.columnSize(selectX + 1) == 0) {
										selectX++;
									}
									else break;
								}
								else break;
							}
							if (selectX != 4) {	
								if (selectY + 1 > columns.columnSize(selectX + 1)) {
									selectY = columns.columnSize(selectX + 1) - 1;
								}
							}
							selectX++;
							drawCursor();
						} 
						break;
					}
					case (KeyEvent.VK_Z):{
						if(selectX<5) {
							columns.clearDisplay();
							CardNumberNode storage =  columns.search2(selectX, selectY);
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												CardNumberNode temp=storage;
												while(temp!=null) {
													columns.addCard(column, temp.getCardNumber());
													temp=temp.getNext();
												}
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
						else if(selectX==5&&boxNumber!=0&&filled) {
							filled=false;
							console.getTextWindow().setCursorPosition(45, 9);
							System.out.print("  ");
							columns.clearDisplay();
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												columns.addCard(column, boxNumber);
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										if(selectX!=5)
											selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
					}
				}
				keypr = false;
			}
			try { Thread.sleep(50); } catch (InterruptedException e) {}
		}
		
	}
	
	//this method will use variables SelectX and SelectY.
	void executionMode() {
		
	}
	
	//method for visual cursor movement
	void clearCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(" ");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print(" ");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(" ");
		}
	}
	
	//method for visual cursor movement
	void drawCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(">");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print("<");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(">");
		}
	}

	//box setup
	void box() {
		// The game contains 50 cards
		for (int i = 0; i < 50; i++) {
			// The cards: 1 2 3 4 5 6 7 8 9 10
			int tempNumber = randomNumber(1, 10);
			// Must have 5 of a card type 
			if (box.counter(tempNumber) < 5) {
				box.add(tempNumber);
			}
			//if more than 5
			else {
				i--;
			}			
		}
	}
	
	
	void initialDisplay() {
		columns.display();
		console.getTextWindow().setCursorPosition(44, 8);	System.out.println("+--+");
		console.getTextWindow().setCursorPosition(44, 9);	System.out.println("|  |");
		console.getTextWindow().setCursorPosition(44, 10);  System.out.println("+--+");
	}
	
	
	void initialDistribution() {
		
		/// to create columns
		columns.addColumn("C1"); 
		columns.addColumn("C2");
		columns.addColumn("C3");
		columns.addColumn("C4");
		columns.addColumn("C5");
		
		
		/* test scenario
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		
		columns.addCard("C2", (int) box.popTheHead());
		columns.addCard("C2", (int) box.popTheHead());
		
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		*/
		
		for (int j = 0; j < 6; j++) {
			// initial distribution
			columns.addCard("C1", (int) box.popTheHead());
			columns.addCard("C2", (int) box.popTheHead());
			columns.addCard("C3", (int) box.popTheHead());
			columns.addCard("C4", (int) box.popTheHead());
			columns.addCard("C5", (int) box.popTheHead());
		}
		
	}

	void printHighScoreTable() { // print the high score table
		highScoreTable.sort();
		highScoreTable.display1();
	}
	
	void readHighScoreTable(){ // read the high score table .txt file
		highScoreTable = new DoubleLinkedList(); // initialize the high score table dll
		try {
			File file = new File("HighScoreTable.txt"); // create a new file object
			Scanner reader = new Scanner(file); // create a new scanner object
			while (reader.hasNextLine()) { // while there is an element in the .txt file
				Object data = reader.nextLine(); // keep the current object
				highScoreTable.add(data); // add the object
			}
			reader.close();
		} catch (FileNotFoundException e) { // error handling
			System.out.println(e);
		}
	}


	//sets color of text
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setForegroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color foregroundColor = new Color(red, green, blue);
		Color backgroundColor = console.getTextAttributes().getBackground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}

	// sets color of background
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setBackgroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color backgroundColor = new Color(red, green, blue);
		Color foregroundColor = console.getTextAttributes().getForeground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-23 14:26:37.296
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-23 14:26:37.297
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-23 14:26:40.815
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package columns;

import enigma.console.Console;
import enigma.console.TextAttributes;
import enigma.core.Enigma;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Columns {
	
	static Console console = Enigma.getConsole("Columns",155,38,20);

	DoubleLinkedList highScoreTable;
	
	MultiLinkedList columns = new MultiLinkedList();

	SingleLinkedList box = new SingleLinkedList();
	static int boxNumber=0;
	int selectY = 0;
	int selectX = 0;
	static boolean filled=false;
	// ------ Standard variables for keyboard ------
	public KeyListener klis;
	public boolean keypr; // key pressed?
	public int rkey; // key (for press/release)
	
	Columns(){
		
		klis = new KeyListener() {
			public void keyTyped(KeyEvent e) {
			}

			public void keyPressed(KeyEvent e) {
				if (!keypr) {
					keypr = true;
					rkey = e.getKeyCode();
				}
			}

			public void keyReleased(KeyEvent e) {
			}
		};
		console.getTextWindow().addKeyListener(klis);

		menu();

	}
	
	void menu() {
		console.getTextWindow().setCursorPosition(0, 0);
		int chosen= 1;
		setBackgroundColor(0.03, 0.49, 0.53);
		for (int i = 0; i < 37; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
		while (true) {			
			printMenu(chosen);			
			 if (keypr == true) {
				//to play related sound
				keypr = false;
				 switch (rkey) {
				case KeyEvent.VK_UP:
					if (chosen == 1 )
						chosen =4;
					else
						chosen--;
					break;
				case KeyEvent.VK_DOWN:
					if (chosen == 4 )
						chosen =1;
					else
						chosen++;
					break;
				case KeyEvent.VK_ENTER:
					switch (chosen) {
					case 1:
						consoleClear();
						columnsGamePlay();
						break;
					case 2:
						System.out.println("2");
						break;
					case 3:
						System.out.println("3");
						break;
					case 4:
						System.exit(0);
						break;		
					}
					break;
				}
			}		 			 			 
		}
	}
	
	void consoleClear() {
		console.getTextWindow().setCursorPosition(0, 0);
		for (int i = 0; i < 37; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
	}

	void printMenu(int index) {
		
		setBackgroundColor(0.21, 0.1, 0.16);

		
		setForegroundColor(0.03, 0.49, 0.53);
		  console.getTextWindow().setCursorPosition(0, 8);System.out.println("                                   ");
		 console.getTextWindow().setCursorPosition(0, 9);System.out.println("       .------.\r    .------.\r        ");												   
		 console.getTextWindow().setCursorPosition(0, 10);System.out.println("       |7.--. |\r    |9.--. |\r        ");
		console.getTextWindow().setCursorPosition(0, 11);System.out.println("       | :/\\: |\r    | :/\\: |\r        ");
		console.getTextWindow().setCursorPosition(0, 12);System.out.println("       | (__) |\r    | (__) |\r        ");
		console.getTextWindow().setCursorPosition(0, 13);System.out.println("       | '--'7|\r    | '--'9|\r        ");
		console.getTextWindow().setCursorPosition(0, 14);System.out.println("       `------'    `------'        ");
		console.getTextWindow().setCursorPosition(0, 15);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(0, 16);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(35, 8);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 9);System.out.println("  ______      ___      _____      _____     ______   ________   ____  _____     ______      \r");
		console.getTextWindow().setCursorPosition(35, 10);System.out.println(".' ____ \\   .'   `.   |_   _|    |_   _|  .' ___  | |_   __  | |_   \\|_   _|  .' ___  |     \r");
		console.getTextWindow().setCursorPosition(35, 11);System.out.println("| (___ \\_| /  .-.  \\    | |        | |   / .'   \\_|   | |_ \\_|   |   \\ | |   / .'   \\_|     \r");
		console.getTextWindow().setCursorPosition(35, 12);System.out.println(" _.____`.  | |   | |    | |   _    | |   | |          |  _| _    | |\\ \\| |   | |   ____     \r");
		console.getTextWindow().setCursorPosition(35, 13);System.out.println("| \\____) | \\  `-'  /   _| |__/ |  _| |_  \\ `.___.'\\  _| |__/ |  _| |_\\   |_  \\ `.___]       \r");
		console.getTextWindow().setCursorPosition(35, 14);System.out.println(" \\______.'  `.___.'   |________| |_____|  `.____ .' |________| |_____|\\____|  `._____.'     \r");
		console.getTextWindow().setCursorPosition(35, 15);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 16);System.out.println("                                                                                                                       ");
		 console.getTextWindow().setCursorPosition(125, 9);System.out.println("  .------.\r    .------.\r       ");												   
		 console.getTextWindow().setCursorPosition(125, 10);System.out.println("  |7.--. |\r    |9.--. |\r       ");
		console.getTextWindow().setCursorPosition(125, 11);System.out.println("  | :/\\: |\r    | :/\\: |\r       ");
		console.getTextWindow().setCursorPosition(125, 12);System.out.println("  |  \\/  |\r    |  \\/  |\r       ");
		console.getTextWindow().setCursorPosition(125, 13);System.out.println("  | '--'7|\r    | '--'9|\r       ");
		console.getTextWindow().setCursorPosition(125, 14);System.out.println("  `------'    `------'       ");
		
		setBackgroundColor(0.03, 0.49, 0.53);

		if (index == 1)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(45, 19);
		System.out.println(" ____ ____ ____ ____ \r");
		System.out.println("||p |||l |||a |||y ||\r");
		System.out.println();		+ "||__|||__|||__|||__||\r\n"
				+ "|/__\\|/__\\|/__\\|/__\\|");
		
		if (index == 2)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(65, 23);
		System.out.println("    OPTIONS  ");
		
		if (index == 3)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(85, 27);
		System.out.println("   CREDITS   ");
		
		
		if (index == 4) 
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(105, 31);
		System.out.println("     EXIT    ");
		setForegroundColor(0.91, 0.76, 0.83);
	}
	
	void columnsGamePlay() {
		//setup
		box();
		console.getTextWindow().setCursorPosition(0, 23);
		box.display();
		console.getTextWindow().setCursorPosition(0, 0);
		initialDistribution();
		initialDisplay();
		readHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 12);
		printHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 0);
		//game play
		
		while (true) {
			selectionMode();
			executionMode();
		}
	}
	
	// random number generator
	int randomNumber(int min, int max) {
	    int random_int = (int)Math.floor(Math.random()*(max-min+1)+min);  
		return random_int;
	}
	void selectionMode() {
		drawCursor();
		boolean loop = true;
		while (loop) {
			if (keypr) {
				switch(rkey) {
					case (KeyEvent.VK_ENTER): {
						if (selectX == 5) {
							boolean allowDraw = true;
							for (int i = 0; i < 5; i++) {
								if (columns.columnSize(i) == 0) 
								{
									allowDraw = false;
									break;
								}
							}
							if (allowDraw) {
								//draw
								filled=true;
								console.getTextWindow().setCursorPosition(45, 9);
								System.out.print("  ");
								console.getTextWindow().setCursorPosition(45, 9);
								boxNumber=(int)box.popTheHead();
								System.out.print(boxNumber);
							}
						}
						break;
					}
					case (KeyEvent.VK_UP): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == 0) selectY = columns.columnSize(selectX) - 1;
							else selectY--;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_DOWN): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == columns.columnSize(selectX) - 1) selectY = 0;
							else selectY++;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_LEFT): {
						if (selectX != 0) {
							int tempX = selectX;
							while (tempX != 0) {
								if (columns.columnSize(tempX - 1) == 0) {
									tempX--;
								}
								else {
									clearCursor();
									selectX = tempX - 1;
									if (selectY + 1 > columns.columnSize(selectX)) {
										selectY = columns.columnSize(selectX) - 1;
									}
									drawCursor();
									break;
								}
							}
						}
						break;
					}
					case (KeyEvent.VK_RIGHT): {
						if (selectX != 5) {
							clearCursor();
							while (true) {
								if (selectX != 4) {
									if (columns.columnSize(selectX + 1) == 0) {
										selectX++;
									}
									else break;
								}
								else break;
							}
							if (selectX != 4) {	
								if (selectY + 1 > columns.columnSize(selectX + 1)) {
									selectY = columns.columnSize(selectX + 1) - 1;
								}
							}
							selectX++;
							drawCursor();
						} 
						break;
					}
					case (KeyEvent.VK_Z):{
						if(selectX<5) {
							columns.clearDisplay();
							CardNumberNode storage =  columns.search2(selectX, selectY);
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												CardNumberNode temp=storage;
												while(temp!=null) {
													columns.addCard(column, temp.getCardNumber());
													temp=temp.getNext();
												}
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
						else if(selectX==5&&boxNumber!=0&&filled) {
							filled=false;
							console.getTextWindow().setCursorPosition(45, 9);
							System.out.print("  ");
							columns.clearDisplay();
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												columns.addCard(column, boxNumber);
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										if(selectX!=5)
											selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
					}
				}
				keypr = false;
			}
			try { Thread.sleep(50); } catch (InterruptedException e) {}
		}
		
	}
	
	//this method will use variables SelectX and SelectY.
	void executionMode() {
		
	}
	
	//method for visual cursor movement
	void clearCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(" ");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print(" ");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(" ");
		}
	}
	
	//method for visual cursor movement
	void drawCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(">");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print("<");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(">");
		}
	}

	//box setup
	void box() {
		// The game contains 50 cards
		for (int i = 0; i < 50; i++) {
			// The cards: 1 2 3 4 5 6 7 8 9 10
			int tempNumber = randomNumber(1, 10);
			// Must have 5 of a card type 
			if (box.counter(tempNumber) < 5) {
				box.add(tempNumber);
			}
			//if more than 5
			else {
				i--;
			}			
		}
	}
	
	
	void initialDisplay() {
		columns.display();
		console.getTextWindow().setCursorPosition(44, 8);	System.out.println("+--+");
		console.getTextWindow().setCursorPosition(44, 9);	System.out.println("|  |");
		console.getTextWindow().setCursorPosition(44, 10);  System.out.println("+--+");
	}
	
	
	void initialDistribution() {
		
		/// to create columns
		columns.addColumn("C1"); 
		columns.addColumn("C2");
		columns.addColumn("C3");
		columns.addColumn("C4");
		columns.addColumn("C5");
		
		
		/* test scenario
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		
		columns.addCard("C2", (int) box.popTheHead());
		columns.addCard("C2", (int) box.popTheHead());
		
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		*/
		
		for (int j = 0; j < 6; j++) {
			// initial distribution
			columns.addCard("C1", (int) box.popTheHead());
			columns.addCard("C2", (int) box.popTheHead());
			columns.addCard("C3", (int) box.popTheHead());
			columns.addCard("C4", (int) box.popTheHead());
			columns.addCard("C5", (int) box.popTheHead());
		}
		
	}

	void printHighScoreTable() { // print the high score table
		highScoreTable.sort();
		highScoreTable.display1();
	}
	
	void readHighScoreTable(){ // read the high score table .txt file
		highScoreTable = new DoubleLinkedList(); // initialize the high score table dll
		try {
			File file = new File("HighScoreTable.txt"); // create a new file object
			Scanner reader = new Scanner(file); // create a new scanner object
			while (reader.hasNextLine()) { // while there is an element in the .txt file
				Object data = reader.nextLine(); // keep the current object
				highScoreTable.add(data); // add the object
			}
			reader.close();
		} catch (FileNotFoundException e) { // error handling
			System.out.println(e);
		}
	}


	//sets color of text
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setForegroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color foregroundColor = new Color(red, green, blue);
		Color backgroundColor = console.getTextAttributes().getBackground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}

	// sets color of background
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setBackgroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color backgroundColor = new Color(red, green, blue);
		Color foregroundColor = console.getTextAttributes().getForeground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-23 14:26:40.817
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-23 14:26:40.818
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-23 14:26:44.500
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package columns;

import enigma.console.Console;
import enigma.console.TextAttributes;
import enigma.core.Enigma;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Columns {
	
	static Console console = Enigma.getConsole("Columns",155,38,20);

	DoubleLinkedList highScoreTable;
	
	MultiLinkedList columns = new MultiLinkedList();

	SingleLinkedList box = new SingleLinkedList();
	static int boxNumber=0;
	int selectY = 0;
	int selectX = 0;
	static boolean filled=false;
	// ------ Standard variables for keyboard ------
	public KeyListener klis;
	public boolean keypr; // key pressed?
	public int rkey; // key (for press/release)
	
	Columns(){
		
		klis = new KeyListener() {
			public void keyTyped(KeyEvent e) {
			}

			public void keyPressed(KeyEvent e) {
				if (!keypr) {
					keypr = true;
					rkey = e.getKeyCode();
				}
			}

			public void keyReleased(KeyEvent e) {
			}
		};
		console.getTextWindow().addKeyListener(klis);

		menu();

	}
	
	void menu() {
		console.getTextWindow().setCursorPosition(0, 0);
		int chosen= 1;
		setBackgroundColor(0.03, 0.49, 0.53);
		for (int i = 0; i < 37; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
		while (true) {			
			printMenu(chosen);			
			 if (keypr == true) {
				//to play related sound
				keypr = false;
				 switch (rkey) {
				case KeyEvent.VK_UP:
					if (chosen == 1 )
						chosen =4;
					else
						chosen--;
					break;
				case KeyEvent.VK_DOWN:
					if (chosen == 4 )
						chosen =1;
					else
						chosen++;
					break;
				case KeyEvent.VK_ENTER:
					switch (chosen) {
					case 1:
						consoleClear();
						columnsGamePlay();
						break;
					case 2:
						System.out.println("2");
						break;
					case 3:
						System.out.println("3");
						break;
					case 4:
						System.exit(0);
						break;		
					}
					break;
				}
			}		 			 			 
		}
	}
	
	void consoleClear() {
		console.getTextWindow().setCursorPosition(0, 0);
		for (int i = 0; i < 37; i++) {
			for (int j = 0; j < 154; j++) {
				System.out.print(" ");
			}
			System.out.println();
		}
	}

	void printMenu(int index) {
		
		setBackgroundColor(0.21, 0.1, 0.16);

		
		setForegroundColor(0.03, 0.49, 0.53);
		  console.getTextWindow().setCursorPosition(0, 8);System.out.println("                                   ");
		 console.getTextWindow().setCursorPosition(0, 9);System.out.println("       .------.\r    .------.\r        ");												   
		 console.getTextWindow().setCursorPosition(0, 10);System.out.println("       |7.--. |\r    |9.--. |\r        ");
		console.getTextWindow().setCursorPosition(0, 11);System.out.println("       | :/\\: |\r    | :/\\: |\r        ");
		console.getTextWindow().setCursorPosition(0, 12);System.out.println("       | (__) |\r    | (__) |\r        ");
		console.getTextWindow().setCursorPosition(0, 13);System.out.println("       | '--'7|\r    | '--'9|\r        ");
		console.getTextWindow().setCursorPosition(0, 14);System.out.println("       `------'    `------'        ");
		console.getTextWindow().setCursorPosition(0, 15);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(0, 16);System.out.println("                                   ");
		console.getTextWindow().setCursorPosition(35, 8);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 9);System.out.println("  ______      ___      _____      _____     ______   ________   ____  _____     ______      \r");
		console.getTextWindow().setCursorPosition(35, 10);System.out.println(".' ____ \\   .'   `.   |_   _|    |_   _|  .' ___  | |_   __  | |_   \\|_   _|  .' ___  |     \r");
		console.getTextWindow().setCursorPosition(35, 11);System.out.println("| (___ \\_| /  .-.  \\    | |        | |   / .'   \\_|   | |_ \\_|   |   \\ | |   / .'   \\_|     \r");
		console.getTextWindow().setCursorPosition(35, 12);System.out.println(" _.____`.  | |   | |    | |   _    | |   | |          |  _| _    | |\\ \\| |   | |   ____     \r");
		console.getTextWindow().setCursorPosition(35, 13);System.out.println("| \\____) | \\  `-'  /   _| |__/ |  _| |_  \\ `.___.'\\  _| |__/ |  _| |_\\   |_  \\ `.___]       \r");
		console.getTextWindow().setCursorPosition(35, 14);System.out.println(" \\______.'  `.___.'   |________| |_____|  `.____ .' |________| |_____|\\____|  `._____.'     \r");
		console.getTextWindow().setCursorPosition(35, 15);System.out.println("                                                                                                                       ");
		console.getTextWindow().setCursorPosition(35, 16);System.out.println("                                                                                                                       ");
		 console.getTextWindow().setCursorPosition(125, 9);System.out.println("  .------.\r    .------.\r       ");												   
		 console.getTextWindow().setCursorPosition(125, 10);System.out.println("  |7.--. |\r    |9.--. |\r       ");
		console.getTextWindow().setCursorPosition(125, 11);System.out.println("  | :/\\: |\r    | :/\\: |\r       ");
		console.getTextWindow().setCursorPosition(125, 12);System.out.println("  |  \\/  |\r    |  \\/  |\r       ");
		console.getTextWindow().setCursorPosition(125, 13);System.out.println("  | '--'7|\r    | '--'9|\r       ");
		console.getTextWindow().setCursorPosition(125, 14);System.out.println("  `------'    `------'       ");
		
		setBackgroundColor(0.03, 0.49, 0.53);

		if (index == 1)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(45, 19);
		System.out.println(" ____ ____ ____ ____ \r");
		System.out.println("||p |||l |||a |||y ||\r");
		System.out.println();		+ "||__|||__|||__|||__||\r\n"
				+ "|/__\\|/__\\|/__\\|/__\\|");
		
		if (index == 2)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(65, 23);
		System.out.println("    OPTIONS  ");
		
		if (index == 3)
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(85, 27);
		System.out.println("   CREDITS   ");
		
		
		if (index == 4) 
			setForegroundColor(0.21, 0.1, 0.16);
		else
			setForegroundColor(0.91, 0.76, 0.83);
		console.getTextWindow().setCursorPosition(105, 31);
		System.out.println("     EXIT    ");
		setForegroundColor(0.91, 0.76, 0.83);
	}
	
	void columnsGamePlay() {
		//setup
		box();
		console.getTextWindow().setCursorPosition(0, 23);
		box.display();
		console.getTextWindow().setCursorPosition(0, 0);
		initialDistribution();
		initialDisplay();
		readHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 12);
		printHighScoreTable();
		console.getTextWindow().setCursorPosition(0, 0);
		//game play
		
		while (true) {
			selectionMode();
			executionMode();
		}
	}
	
	// random number generator
	int randomNumber(int min, int max) {
	    int random_int = (int)Math.floor(Math.random()*(max-min+1)+min);  
		return random_int;
	}
	void selectionMode() {
		drawCursor();
		boolean loop = true;
		while (loop) {
			if (keypr) {
				switch(rkey) {
					case (KeyEvent.VK_ENTER): {
						if (selectX == 5) {
							boolean allowDraw = true;
							for (int i = 0; i < 5; i++) {
								if (columns.columnSize(i) == 0) 
								{
									allowDraw = false;
									break;
								}
							}
							if (allowDraw) {
								//draw
								filled=true;
								console.getTextWindow().setCursorPosition(45, 9);
								System.out.print("  ");
								console.getTextWindow().setCursorPosition(45, 9);
								boxNumber=(int)box.popTheHead();
								System.out.print(boxNumber);
							}
						}
						break;
					}
					case (KeyEvent.VK_UP): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == 0) selectY = columns.columnSize(selectX) - 1;
							else selectY--;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_DOWN): {
						if (selectX != 5) {
							clearCursor();
							if (selectY == columns.columnSize(selectX) - 1) selectY = 0;
							else selectY++;
							drawCursor();
						}
						break;
					}
					case (KeyEvent.VK_LEFT): {
						if (selectX != 0) {
							int tempX = selectX;
							while (tempX != 0) {
								if (columns.columnSize(tempX - 1) == 0) {
									tempX--;
								}
								else {
									clearCursor();
									selectX = tempX - 1;
									if (selectY + 1 > columns.columnSize(selectX)) {
										selectY = columns.columnSize(selectX) - 1;
									}
									drawCursor();
									break;
								}
							}
						}
						break;
					}
					case (KeyEvent.VK_RIGHT): {
						if (selectX != 5) {
							clearCursor();
							while (true) {
								if (selectX != 4) {
									if (columns.columnSize(selectX + 1) == 0) {
										selectX++;
									}
									else break;
								}
								else break;
							}
							if (selectX != 4) {	
								if (selectY + 1 > columns.columnSize(selectX + 1)) {
									selectY = columns.columnSize(selectX + 1) - 1;
								}
							}
							selectX++;
							drawCursor();
						} 
						break;
					}
					case (KeyEvent.VK_Z):{
						if(selectX<5) {
							columns.clearDisplay();
							CardNumberNode storage =  columns.search2(selectX, selectY);
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												CardNumberNode temp=storage;
												while(temp!=null) {
													columns.addCard(column, temp.getCardNumber());
													temp=temp.getNext();
												}
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
						else if(selectX==5&&boxNumber!=0&&filled) {
							filled=false;
							console.getTextWindow().setCursorPosition(45, 9);
							System.out.print("  ");
							columns.clearDisplay();
							columns.display();
							while(true) {
								boolean loop1 = true;
								while (loop1) {
									if (keypr) {
										clearCursor();
										switch(rkey) {
											case (KeyEvent.VK_LEFT): {
												if (selectX != 0) {
													selectX--;
												}
												break;
											}
											case (KeyEvent.VK_RIGHT): {
												if (selectX != 4) {
													selectX++;
												} 
												break;
											}
											case (KeyEvent.VK_X):{
												String column = "";
												if(selectX==0)
													column="C1";
												else if(selectX==1)
													column="C2";
												else if(selectX==2)
													column="C3";
												else if(selectX==3)
													column="C4";
												else if(selectX==4)
													column="C5";
												columns.addCard(column, boxNumber);
												columns.clearDisplay();
												columns.display();
												loop1=false;
												break;
											}
										}
										if(selectX!=5)
											selectY = columns.columnSize(selectX);
										drawCursor();
										keypr = false;
									}
									try { Thread.sleep(50); } catch (InterruptedException e) {}
								}
								if(loop1==false) {break;}
							}
						}
					}
				}
				keypr = false;
			}
			try { Thread.sleep(50); } catch (InterruptedException e) {}
		}
		
	}
	
	//this method will use variables SelectX and SelectY.
	void executionMode() {
		
	}
	
	//method for visual cursor movement
	void clearCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(" ");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print(" ");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(" ");
		}
	}
	
	//method for visual cursor movement
	void drawCursor() {
		if (selectX == 5) {
			console.getTextWindow().setCursorPosition(43,9);
			System.out.print(">");
			console.getTextWindow().setCursorPosition(48,9);
			System.out.print("<");
		}
		else {
			console.getTextWindow().setCursorPosition((7*(selectX+1))-3,selectY+1);
			System.out.print(">");
		}
	}

	//box setup
	void box() {
		// The game contains 50 cards
		for (int i = 0; i < 50; i++) {
			// The cards: 1 2 3 4 5 6 7 8 9 10
			int tempNumber = randomNumber(1, 10);
			// Must have 5 of a card type 
			if (box.counter(tempNumber) < 5) {
				box.add(tempNumber);
			}
			//if more than 5
			else {
				i--;
			}			
		}
	}
	
	
	void initialDisplay() {
		columns.display();
		console.getTextWindow().setCursorPosition(44, 8);	System.out.println("+--+");
		console.getTextWindow().setCursorPosition(44, 9);	System.out.println("|  |");
		console.getTextWindow().setCursorPosition(44, 10);  System.out.println("+--+");
	}
	
	
	void initialDistribution() {
		
		/// to create columns
		columns.addColumn("C1"); 
		columns.addColumn("C2");
		columns.addColumn("C3");
		columns.addColumn("C4");
		columns.addColumn("C5");
		
		
		/* test scenario
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		columns.addCard("C1", (int) box.popTheHead());
		
		columns.addCard("C2", (int) box.popTheHead());
		columns.addCard("C2", (int) box.popTheHead());
		
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		columns.addCard("C5", (int) box.popTheHead());
		*/
		
		for (int j = 0; j < 6; j++) {
			// initial distribution
			columns.addCard("C1", (int) box.popTheHead());
			columns.addCard("C2", (int) box.popTheHead());
			columns.addCard("C3", (int) box.popTheHead());
			columns.addCard("C4", (int) box.popTheHead());
			columns.addCard("C5", (int) box.popTheHead());
		}
		
	}

	void printHighScoreTable() { // print the high score table
		highScoreTable.sort();
		highScoreTable.display1();
	}
	
	void readHighScoreTable(){ // read the high score table .txt file
		highScoreTable = new DoubleLinkedList(); // initialize the high score table dll
		try {
			File file = new File("HighScoreTable.txt"); // create a new file object
			Scanner reader = new Scanner(file); // create a new scanner object
			while (reader.hasNextLine()) { // while there is an element in the .txt file
				Object data = reader.nextLine(); // keep the current object
				highScoreTable.add(data); // add the object
			}
			reader.close();
		} catch (FileNotFoundException e) { // error handling
			System.out.println(e);
		}
	}


	//sets color of text
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setForegroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color foregroundColor = new Color(red, green, blue);
		Color backgroundColor = console.getTextAttributes().getBackground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}

	// sets color of background
	// each value is a float (0.0 to 1.0) representing R G B values.
	public void setBackgroundColor(double R, double G, double B) {
		float red = (float) R;
		float green = (float) G;
		float blue = (float) B;
		if (red < 0)
			red = 0;
		else if (red > 1)
			red = 1;
		if (green < 0)
			green = 0;
		else if (green > 1)
			green = 1;
		if (blue < 0)
			blue = 0;
		else if (blue > 1)
			blue = 1;

		Color backgroundColor = new Color(red, green, blue);
		Color foregroundColor = console.getTextAttributes().getForeground();
		console.setTextAttributes(new TextAttributes(foregroundColor, backgroundColor));
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor46.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-23 14:26:44.502
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor46.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-23 14:26:44.503
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor46.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SESSION 2022-05-24 01:33:05.230 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-24 01:33:25.285
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-24 01:33:25.285
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@26679788,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5cdda548,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-24 01:33:25.285
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4f2544b0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5bad555b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-24 01:33:28.927
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yusuf'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-25 19:50:33.192 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-25 19:50:46.878
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-25 19:50:46.878
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@56f84c9b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@26679788,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-25 19:50:46.878
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5cdda548,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4f2544b0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-25 19:50:49.818
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yusuf'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-25 19:55:17.203 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-25 19:55:20.737
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-25 19:55:20.737
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@37e491e2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@56f84c9b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-25 19:55:20.737
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@26679788,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5cdda548,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-25 19:55:22.657
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yusuf'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-25 22:33:17.081 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-25 22:33:24.537
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-25 22:33:24.537
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@56f84c9b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@26679788,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-25 22:33:24.537
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5cdda548,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4f2544b0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-25 22:33:28.576
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yusuf'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-26 12:02:41.183 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-26 12:02:56.773
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-26 12:02:56.773
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@56f84c9b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@26679788,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-26 12:02:56.773
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5cdda548,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4f2544b0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-26 12:02:59.054
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yusuf'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-26 15:25:30.288 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-26 15:25:40.374
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-26 15:25:40.374
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@37e491e2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@56f84c9b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-26 15:25:40.374
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@26679788,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5cdda548,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-26 15:25:43.016
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yusuf'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-27 00:43:15.745 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-27 00:43:23.002
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-27 00:43:23.002
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@25ea068e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4cd8db31,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-27 00:43:23.002
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@201a8ea7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@ecf028c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-27 00:43:25.443
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yusuf'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-27 04:36:04.292 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-27 04:36:10.357
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-27 04:36:10.357
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@31183ee2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@63f3366a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-27 04:36:10.357
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@37e491e2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@56f84c9b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-27 04:36:11.876
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yusuf'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-27 04:49:46.554 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-27 04:49:50.017
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-27 04:49:50.017
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@37e491e2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@56f84c9b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-27 04:49:50.017
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@26679788,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5cdda548,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-27 04:49:51.941
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yusuf'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
